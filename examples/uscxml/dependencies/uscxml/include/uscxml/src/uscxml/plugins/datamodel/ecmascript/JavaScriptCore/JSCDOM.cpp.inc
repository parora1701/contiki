/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#define SWIG_AsCharPtrAndSize(val, cptr, psize, alloc)  SWIG_JSC_AsCharPtrAndSize(context, val, cptr, psize, alloc)
#define SWIG_FromCharPtrAndSize(cptr, size)  SWIG_JSC_FromCharPtrAndSize(context, cptr, size)
#define SWIG_FromCharPtr(cptr) SWIG_JSC_FromCharPtr(context, cptr)


#define SWIG_JSC_FROM_DECL_ARGS(arg1)              (JSContextRef context, arg1)
#define SWIG_JSC_FROM_CALL_ARGS(arg1)              (context, arg1)
#define SWIG_JSC_AS_DECL_ARGS(arg1, arg2)          (JSContextRef context, arg1, arg2)
#define SWIG_JSC_AS_CALL_ARGS(arg1, arg2)          (context, arg1, arg2)



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#include <JavaScriptCore/JavaScript.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <limits.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ----------------------------------------------------------------------------
 *  Errors and exceptions
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIG_JSC_exception(context, exception, code, msg)
#define SWIG_exception(code, msg) SWIG_JSC_exception(context, exception, code, msg)
#define SWIG_fail                 goto fail

SWIGRUNTIME void SWIG_Javascript_Raise(JSContextRef context, JSValueRef *exception, const char* type) {
  JSStringRef message = JSStringCreateWithUTF8CString(type);
  JSValueRef error_arguments[1]; 
  JSObjectRef exception_object;
  JSValueRef exception_value;
  exception_value = JSValueMakeString(context, message);
  /* Converting the result to an object will let JavascriptCore add 
     "sourceURL" (file) and "line" (number) and "message" to the exception,
     instead of just returning a raw string. This is extremely important for debugging your errors.
     Using JSObjectMakeError is better than JSValueToObject because the latter only populates
     "sourceURL" and "line", but not "message" or any others I don't know about.
   */
  error_arguments[0] = exception_value;
  exception_object = JSObjectMakeError(context, 1, error_arguments, NULL);

  /* Return the exception_object */
  *exception = exception_object;

  JSStringRelease(message);
}

SWIGRUNTIME void SWIG_JSC_exception(JSContextRef context, JSValueRef *exception, int code, const char* msg) {
  SWIG_Javascript_Raise(context, exception, msg);
}

/* ----------------------------------------------------------------------------
 *  The parent class of all Proxies
 *
 * ---------------------------------------------------------------------------*/

typedef struct {
  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
} SwigPrivData;

SWIGRUNTIME JSValueRef _wrap_SwigObject_disown(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  JSValueRef jsresult;

  JSObjectRef obj = JSValueToObject(context, thisObject, NULL);
  SwigPrivData *cdata = (SwigPrivData *) JSObjectGetPrivate(obj);

  cdata->swigCMemOwn = false;

  jsresult = JSValueMakeUndefined(context);
  return jsresult;
}

SWIGRUNTIME JSValueRef _wrap_SwigObject_getCPtr(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  JSValueRef jsresult;
  long result;

  JSObjectRef obj = JSValueToObject(context, thisObject, NULL);
  SwigPrivData *cdata = (SwigPrivData*) JSObjectGetPrivate(obj);

  result = (long) cdata->swigCObject;
  jsresult = JSValueMakeNumber(context, result);

  return jsresult;
}

SWIGRUNTIME JSValueRef _wrap_SwigObject_equals(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  JSValueRef jsresult;
  bool result;

  JSObjectRef obj = JSValueToObject(context, thisObject, NULL);
  SwigPrivData *cdata = (SwigPrivData*) JSObjectGetPrivate(obj);

  JSObjectRef obj2 = JSValueToObject(context, argv[0], NULL);
  SwigPrivData *cdata2 = (SwigPrivData*) JSObjectGetPrivate(obj2);

  result = (cdata->swigCObject == cdata2->swigCObject);
  jsresult = JSValueMakeBoolean(context, result);

  return jsresult;
}

SWIGRUNTIME JSStaticValue _SwigObject_values[] = {
  {
    0, 0, 0, 0
  }
};

SWIGRUNTIME JSStaticFunction _SwigObject_functions[] = {
  {
    "disown",_wrap_SwigObject_disown, kJSPropertyAttributeNone
  },
  {
    "equals",_wrap_SwigObject_equals, kJSPropertyAttributeNone
  },
  {
    "getCPtr",_wrap_SwigObject_getCPtr, kJSPropertyAttributeNone
  },
  {
    0, 0, 0
  }
};

SWIGRUNTIME JSClassDefinition _SwigObject_objectDefinition;

SWIGRUNTIME JSClassRef _SwigObject_classRef;


SWIGRUNTIME int SWIG_JSC_ConvertInstancePtr(JSContextRef context, JSObjectRef objRef, void** ptr, swig_type_info *info, int flags) {
  SwigPrivData *cdata;

  cdata = (SwigPrivData *) JSObjectGetPrivate(objRef);
  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    bool type_valid = false;
    swig_cast_info *t = info->cast;
    while(t != NULL) {
      if(t->type == cdata->info) {
        type_valid = true;
        break;
      }
      t = t->next;
    }
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }

  *ptr = cdata->swigCObject;

  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }

  return SWIG_OK;
}

SWIGRUNTIME int SWIG_JSC_ConvertPtr(JSContextRef context, JSValueRef valRef, void** ptr, swig_type_info *info, int flags) {
  JSObjectRef objRef;

  /* special case: JavaScript null => C NULL pointer */
  if(JSValueIsNull(context, valRef)) {
    *ptr=0;
    return SWIG_OK;
  }

  if(!JSValueIsObject(context, valRef)) {
    return SWIG_TypeError;
  }

  objRef = JSValueToObject(context, valRef, NULL);
  if(objRef == NULL) {
    return SWIG_ERROR;
  }

  return SWIG_JSC_ConvertInstancePtr(context, objRef, ptr, info, flags);
}

SWIGRUNTIME JSObjectRef SWIG_JSC_NewPointerObj(JSContextRef context, void *ptr, swig_type_info *info, int flags) {
  JSClassRef classRef;
  JSObjectRef result;
  SwigPrivData *cdata;

  if (ptr == NULL) {
    // HACK: it is not possible to use JSValueToObject (causing seg-fault)
    // This static cast turned out to be a workaround
    // In future, we should change the interface of this method
    // to return JSValueRef instead of JSObjectRef.
    return (JSObjectRef) JSValueMakeNull(context);
  }

  if(info->clientdata == NULL) {
    classRef = _SwigObject_classRef;
  } else {
    classRef = (JSClassRef) info->clientdata;
  }

  result = JSObjectMake(context, classRef, NULL);

  cdata = (SwigPrivData*) malloc(sizeof(SwigPrivData));
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

  JSObjectSetPrivate(result, cdata);

  return result;
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_JSC_ConvertPtr(context, obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_JSC_NewPointerObj(context, ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_JSC_ConvertInstancePtr(context, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_JSC_NewPointerObj(context, thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_JSC_ConvertPtr(context, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_JSC_NewPointerObj(context, ptr, type, 0)

/* ----------------------------------------------------------------------------
 *  A class for packed data
 *
 * ---------------------------------------------------------------------------*/

typedef struct {
  void *data;
  size_t size;
  swig_type_info *type;
} SwigPackedData;

SWIGRUNTIME JSStaticValue _SwigPackedData_values[] = {
  {
    0, 0, 0, 0
  }
};
SWIGRUNTIME JSStaticFunction _SwigPackedData_functions[] = {
  {
    0, 0, 0
  }
};
SWIGRUNTIME JSClassDefinition _SwigPackedData_objectDefinition;
SWIGRUNTIME JSClassRef _SwigPackedData_classRef;

SWIGRUNTIMEINLINE
int SwigJSCPacked_Check(JSContextRef context, JSValueRef valRef) {
  return JSValueIsObjectOfClass(context, valRef, _SwigPackedData_classRef);
}

SWIGRUNTIME
swig_type_info* SwigJSCPacked_UnpackData(JSContextRef context, JSValueRef valRef, void *ptr, size_t size) {
  if (SwigJSCPacked_Check(context, valRef)) {
    JSObjectRef objRef = JSValueToObject(context, valRef, NULL);
    SwigPackedData *sobj = (SwigPackedData *) JSObjectGetPrivate(objRef);
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIG_JSC_ConvertPacked(JSContextRef context, JSValueRef valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigJSCPacked_UnpackData(context, valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME
JSValueRef SWIG_JSC_NewPackedObj(JSContextRef context, void *data, size_t size, swig_type_info *type) {

  JSClassRef classRef = _SwigObject_classRef;
  JSObjectRef result = JSObjectMake(context, classRef, NULL);

  SwigPackedData* cdata = (SwigPackedData*) malloc(sizeof(SwigPackedData));
  cdata->data = data;
  cdata->size = size;
  cdata->type = type;

  JSObjectSetPrivate(result, cdata);

  return result;
}

/*  SwigPackedData wrappers  */
SWIGRUNTIME
void _wrap_SwigPackedData_delete(JSObjectRef obj)
{
  SwigPackedData* cdata = (SwigPackedData*) JSObjectGetPrivate(obj);
  if (cdata) {
    free(cdata->data);
  }
}

/* for C++ member pointers, ie, member methods */

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_JSC_ConvertPacked(context, obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_JSC_NewPackedObj(context, ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/
SWIGRUNTIME
unsigned int SWIGJSC_ArrayLength(JSContextRef context, JSObjectRef arr) {
  static JSStringRef LENGTH = 0;
  JSValueRef exception = NULL;
  JSValueRef js_length;
  double length;

  if (LENGTH == 0) {
    LENGTH = JSStringCreateWithUTF8CString("length");
  }

  js_length = JSObjectGetProperty(context, arr, LENGTH, &exception);
  if (exception == 0 && JSValueIsNumber(context, js_length)) {
    length = JSValueToNumber(context, js_length, 0);
    return (unsigned int) length;
  } else {
    return 0;
  }
}

SWIGRUNTIME
JSValueRef SWIGJSC_AppendOutput(JSContextRef context, JSValueRef value, JSValueRef obj) {
  JSObjectRef arr;
  unsigned int length;

  if (JSValueIsUndefined(context, value)) {
    arr = JSObjectMakeArray(context, 0, 0, 0);
  } else {
    arr = JSValueToObject(context, value, 0);
  }

  length = SWIGJSC_ArrayLength(context, arr);
  JSObjectSetPropertyAtIndex(context, arr, length, obj, 0);
  return arr;
}


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Data swig_types[0]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr swig_types[1]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCDATASection swig_types[2]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData swig_types[3]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMComment swig_types[4]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument swig_types[5]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentFragment swig_types[6]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType swig_types[7]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement swig_types[8]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity swig_types[9]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntityReference swig_types[10]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException swig_types[11]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap swig_types[12]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode swig_types[13]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList swig_types[14]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNotation swig_types[15]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction swig_types[16]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText swig_types[17]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTypeInfo swig_types[18]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMUserDataHandler swig_types[19]
#define SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager swig_types[20]
#define SWIGTYPE_p_bool swig_types[21]
#define SWIGTYPE_p_char swig_types[22]
#define SWIGTYPE_p_int16_t swig_types[23]
#define SWIGTYPE_p_int32_t swig_types[24]
#define SWIGTYPE_p_int64_t swig_types[25]
#define SWIGTYPE_p_namelist_t swig_types[26]
#define SWIGTYPE_p_params_t swig_types[27]
#define SWIGTYPE_p_size_t swig_types[28]
#define SWIGTYPE_p_ssize_t swig_types[29]
#define SWIGTYPE_p_std__listT_Data_t swig_types[30]
#define SWIGTYPE_p_std__multimapT_std__string_Data_t swig_types[31]
#define SWIGTYPE_p_uint16_t swig_types[32]
#define SWIGTYPE_p_uint32_t swig_types[33]
#define SWIGTYPE_p_uint64_t swig_types[34]
#define SWIGTYPE_p_unsigned_char swig_types[35]
#define SWIGTYPE_p_uscxml__ErrorEvent swig_types[36]
#define SWIGTYPE_p_uscxml__Event swig_types[37]
#define SWIGTYPE_p_void swig_types[38]
static swig_type_info *swig_types[40];
static swig_module_info swig_module = {swig_types, 39, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x030008 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>


SWIGINTERNINLINE JSValueRef
  SWIG_From_int  SWIG_JSC_FROM_DECL_ARGS(int value)
{
  return JSValueMakeNumber(context, value);
}


#include <string>


#include "xercesc/sax/InputSource.hpp"
#include "xercesc/sax/SAXException.hpp"
#include "xercesc/sax/SAXParseException.hpp"
#include "xercesc/sax/Locator.hpp"
#include "xercesc/sax/HandlerBase.hpp"
#include "xercesc/sax2/Attributes.hpp"
#include "xercesc/sax2/ContentHandler.hpp"
#include "xercesc/sax2/LexicalHandler.hpp"
#include "xercesc/sax2/DefaultHandler.hpp"
#include "xercesc/sax2/SAX2XMLReader.hpp"
#include "xercesc/sax2/XMLReaderFactory.hpp"
#include "xercesc/util/PlatformUtils.hpp"
#include "xercesc/util/TransService.hpp"
#include "xercesc/util/XMLString.hpp"
#include "xercesc/util/XMLUri.hpp"
#include "xercesc/util/QName.hpp"
#include "xercesc/util/HexBin.hpp"
#include "xercesc/util/Base64.hpp"
#include "xercesc/parsers/AbstractDOMParser.hpp"
#include "xercesc/parsers/XercesDOMParser.hpp"
#include "xercesc/parsers/SAXParser.hpp"
#include "xercesc/dom/DOM.hpp"
#include "xercesc/framework/LocalFileInputSource.hpp"
#include "xercesc/framework/MemBufInputSource.hpp"
#include "xercesc/framework/StdInInputSource.hpp"
#include "xercesc/framework/URLInputSource.hpp"
#include "xercesc/framework/XMLGrammarDescription.hpp"
#include "xercesc/framework/XMLDTDDescription.hpp"
#include "xercesc/framework/XMLSchemaDescription.hpp"
#include "xercesc/util/NameIdPool.hpp"
#include "xercesc/util/XMLEnumerator.hpp"
#include "xercesc/framework/XMLValidator.hpp"
#include "xercesc/validators/common/Grammar.hpp"
#include "xercesc/validators/DTD/DTDAttDef.hpp"
#include "xercesc/validators/DTD/DTDAttDefList.hpp"
#include "xercesc/validators/DTD/DTDGrammar.hpp"
#include "xercesc/validators/DTD/DTDValidator.hpp"
#include "xercesc/validators/schema/SchemaGrammar.hpp"
#include "xercesc/validators/schema/SchemaValidator.hpp"
#include "xercesc/validators/schema/SchemaAttDefList.hpp"
#include "xercesc/validators/schema/SchemaAttDef.hpp"
#include "xercesc/framework/XMLFormatter.hpp"
#include "xercesc/framework/MemBufFormatTarget.hpp"
#include "xercesc/framework/LocalFileFormatTarget.hpp"
#include "xercesc/framework/StdOutFormatTarget.hpp"
#include "xercesc/framework/Wrapper4InputSource.hpp"
#include "xercesc/framework/psvi/PSVIHandler.hpp"

// for resolving XMLExceptions
#include "xercesc/util/ArrayIndexOutOfBoundsException.hpp"
#include "xercesc/util/EmptyStackException.hpp"
#include "xercesc/util/IllegalArgumentException.hpp"
#include "xercesc/util/InvalidCastException.hpp"
#include "xercesc/util/IOException.hpp"
#include "xercesc/util/NoSuchElementException.hpp"
#include "xercesc/util/NullPointerException.hpp"
#include "xercesc/util/NumberFormatException.hpp"
#include "xercesc/util/ParseException.hpp"
#include "xercesc/util/RuntimeException.hpp"
#include "xercesc/util/SchemaDateTimeException.hpp"
#include "xercesc/util/TranscodingException.hpp"
#include "xercesc/util/UnexpectedEOFException.hpp"
#include "xercesc/util/UnsupportedEncodingException.hpp"
#include "xercesc/util/UTFDataFormatException.hpp"
#include "xercesc/util/XMLNetAccessor.hpp"
#include "xercesc/internal/XSerializationException.hpp"
#include "xercesc/validators/datatype/InvalidDatatypeFacetException.hpp"
#include "xercesc/validators/datatype/InvalidDatatypeValueException.hpp"
#include "xercesc/validators/schema/identity/XPathException.hpp"

XERCES_CPP_NAMESPACE_USE

// we initialize the static UTF-8 transcoding info
// these are used by the typemaps to convert between
// Xerces internal UTF-16 and Perl's internal UTF-8
static XMLCh* UTF8_ENCODING = NULL; 
static XMLTranscoder* UTF8_TRANSCODER  = NULL;

static bool DEBUG_UTF8_OUT = 0;
static bool DEBUG_UTF8_IN = 0;



SWIGINTERN int
SWIG_AsVal_double SWIG_JSC_AS_DECL_ARGS(JSValueRef obj, double *val)
{
  if(!JSValueIsNumber(context, obj)) {
    return SWIG_TypeError;
  }
  if(val) *val = JSValueToNumber(context, obj, NULL);

  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long SWIG_JSC_AS_DECL_ARGS(JSValueRef obj, long* val)
{
  if (!JSValueIsNumber(context, obj)) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) JSValueToNumber(context, obj, NULL);

  return SWIG_OK;
}


SWIGINTERN
int SWIG_AsVal_bool SWIG_JSC_AS_DECL_ARGS(JSValueRef obj, bool *val)
{
  if(!JSValueIsBoolean(context, obj)) {
    return SWIG_ERROR;
  }
  if (val) *val = JSValueToBoolean(context, obj);
  return SWIG_OK;
}


SWIGINTERNINLINE
JSValueRef SWIG_From_bool  SWIG_JSC_FROM_DECL_ARGS(bool value)
{
  return JSValueMakeBoolean(context, value);
}


static swig_type_info *
DOMNode_dynamic_cast(void **ptr) {
   DOMNode **nptr = (DOMNode **) ptr;
   if (*nptr == NULL) {
       return NULL;
   }
   short int type = (*nptr)->getNodeType();
   if (type == DOMNode::TEXT_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText;
   }
   if (type == DOMNode::PROCESSING_INSTRUCTION_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction;
   }
   if (type == DOMNode::DOCUMENT_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument;
   }
   if (type == DOMNode::ELEMENT_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement;
   }
   if (type == DOMNode::ENTITY_REFERENCE_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntityReference;
   }
   if (type == DOMNode::CDATA_SECTION_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCDATASection;
   }
   if (type == DOMNode::CDATA_SECTION_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCDATASection;
   }
   if (type == DOMNode::COMMENT_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMComment;
   }
   if (type == DOMNode::DOCUMENT_TYPE_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType;
   }
   if (type == DOMNode::ENTITY_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity;
   }
   if (type == DOMNode::ATTRIBUTE_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr;
   }
   if (type == DOMNode::NOTATION_NODE) {
      return SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNotation;
   }
   return NULL;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_short SWIG_JSC_AS_DECL_ARGS(JSValueRef obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_JSC_AS_CALL_ARGS(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (short)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE JSValueRef
SWIG_From_long  SWIG_JSC_FROM_DECL_ARGS(long value)
{
  return JSValueMakeNumber(context, value);
}


SWIGINTERNINLINE JSValueRef
SWIG_From_short  SWIG_JSC_FROM_DECL_ARGS(short value)
{    
  return SWIG_From_long  SWIG_JSC_FROM_CALL_ARGS(value);
}


SWIGINTERNINLINE JSValueRef
SWIG_From_unsigned_SS_long  SWIG_JSC_FROM_DECL_ARGS(unsigned long value)
{
  return (value > LONG_MAX) ?
    JSValueMakeNumber(context, value) : JSValueMakeNumber(context, (long)(value));
}


SWIGINTERNINLINE JSValueRef
SWIG_From_size_t  SWIG_JSC_FROM_DECL_ARGS(size_t value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_JSC_FROM_CALL_ARGS((unsigned long)(value));
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_JSC_AS_DECL_ARGS(JSValueRef obj, unsigned long *val)
{
  long longVal;
  if(!JSValueIsNumber(context, obj)) {
    return SWIG_TypeError;
  }

  longVal = (long) JSValueToNumber(context, obj, NULL);

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t SWIG_JSC_AS_DECL_ARGS(JSValueRef obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_JSC_AS_CALL_ARGS(obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = (size_t)(v);
  return res;
}


using uscxml::Data;


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_JSC_AsCharPtrAndSize(JSContextRef context, JSValueRef valRef, char** cptr, size_t* psize, int *alloc)
{
  if(JSValueIsString(context, valRef)) {
    JSStringRef js_str = JSValueToStringCopy(context, valRef, NULL);
    size_t len = JSStringGetMaximumUTF8CStringSize(js_str);
    char* cstr = (char*) (new char[len]);
    /* JSStringGetUTF8CString returns the length including 0-terminator */
    len = JSStringGetUTF8CString(js_str, cstr, len);

    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;

    return SWIG_OK;
  } else {
    if(JSValueIsObject(context, valRef)) {
      JSObjectRef obj = JSValueToObject(context, valRef, NULL);
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}


SWIGINTERN int
SWIG_AsPtr_std_string SWIG_JSC_AS_DECL_ARGS(JSValueRef obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_JSC_AS_DECL_ARGS(JSValueRef obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_JSC_AS_CALL_ARGS(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (int)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE JSValueRef
SWIG_JSC_FromCharPtrAndSize(JSContextRef context, const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      //swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      //return pchar_descriptor ?
      //  SWIG_InternalNewPointerObj(%const_cast(carray,char *), pchar_descriptor, 0) : SWIG_Py_Void();
      return JSValueMakeUndefined(context);
    } else {
      JSStringRef jsstring;
      JSValueRef result;
      if(size < 2) {
        char c[2];
        int i;
        for(i=0;i<size;++i) {
          c[i] = carray[i];
        }
        c[size] = 0;
        jsstring = JSStringCreateWithUTF8CString(c);
      } else {
        jsstring = JSStringCreateWithUTF8CString(carray);
      }
      result = JSValueMakeString(context, jsstring);
      JSStringRelease(jsstring);
      return result;
    }
  } else {
    return JSValueMakeUndefined(context);
  }
}


SWIGINTERNINLINE JSValueRef
SWIG_From_std_string  SWIG_JSC_FROM_DECL_ARGS(const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


#define SWIGJSC_INIT JSCDOM_initialize



 
SWIGINTERN bool JS_registerClass(JSGlobalContextRef context, JSObjectRef parentObject,
                             const char* className,
                             JSClassDefinition* definition) {

    JSStringRef js_className = JSStringCreateWithUTF8CString(className);
    JSObjectRef classObject = JSObjectMake(context, JSClassCreate(definition), NULL);
    JSObjectSetProperty(context, parentObject,
                        js_className, classObject,
                        kJSPropertyAttributeNone, NULL);
    JSStringRelease(js_className);
    
    return true;
}

SWIGINTERN bool JS_registerNamespace(JSGlobalContextRef context, 
                           JSObjectRef namespaceObj, JSObjectRef parentNamespace,
                           const char* name)
{
    JSStringRef js_name = JSStringCreateWithUTF8CString(name);
    JSObjectSetProperty(context, parentNamespace,
                        js_name, namespaceObj,
                        kJSPropertyAttributeNone, NULL);
    JSStringRelease(js_name);
    
    return true;
}


SWIGINTERN bool JS_registerFunction(JSGlobalContextRef context, JSObjectRef object, 
                        const char* functionName, JSObjectCallAsFunctionCallback callback)
{
    JSStringRef js_functionName = JSStringCreateWithUTF8CString(functionName);
    JSObjectSetProperty(context, object, js_functionName,
                        JSObjectMakeFunctionWithCallback(context, js_functionName, callback), 
                        kJSPropertyAttributeNone, NULL);
    JSStringRelease(js_functionName);
    return true;
}

SWIGINTERN bool JS_veto_set_variable(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef value, JSValueRef* exception)
{
    char buffer[256];
    char msg[512];
    int res;
    
    JSStringGetUTF8CString(propertyName, buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
    
    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
    
    return false;
}

SWIGINTERN JSValueRef JS_CharPtrToJSValue(JSContextRef context, char* cstr) {
  JSValueRef val;
  
  JSStringRef jsstring = JSStringCreateWithUTF8CString((char*) cstr);
  val = JSValueMakeString(context, jsstring);
  JSStringRelease(jsstring);

  return val;
}


static JSValueRef _wrap_XERCES_HAS_CPP_NAMESPACE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(1));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static bool _wrap_DEBUG_UTF8_OUT_set(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef value, JSValueRef* exception)
{
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_bool SWIG_JSC_AS_CALL_ARGS(value, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DEBUG_UTF8_OUT_set" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = (bool)(val1);
  DEBUG_UTF8_OUT = arg1;
  
  
  
  return true;
  
  goto fail;
fail:
  return false;
}


static JSValueRef _wrap_DEBUG_UTF8_OUT_get(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  bool result;
  
  JSValueRef jsresult;
  
  result = (bool)DEBUG_UTF8_OUT;
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static bool _wrap_DEBUG_UTF8_IN_set(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef value, JSValueRef* exception)
{
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  
  ecode1 = SWIG_AsVal_bool SWIG_JSC_AS_CALL_ARGS(value, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DEBUG_UTF8_IN_set" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = (bool)(val1);
  DEBUG_UTF8_IN = arg1;
  
  
  
  return true;
  
  goto fail;
fail:
  return false;
}


static JSValueRef _wrap_DEBUG_UTF8_IN_get(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  bool result;
  
  JSValueRef jsresult;
  
  result = (bool)DEBUG_UTF8_IN;
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSClassDefinition _exports_DOMException_classDefinition;

static JSClassDefinition _exports_DOMException_objectDefinition;

static JSClassRef _exports_DOMException_classRef;


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_INDEX_SIZE_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::INDEX_SIZE_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_DOMSTRING_SIZE_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::DOMSTRING_SIZE_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_HIERARCHY_REQUEST_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::HIERARCHY_REQUEST_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_WRONG_DOCUMENT_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::WRONG_DOCUMENT_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_INVALID_CHARACTER_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::INVALID_CHARACTER_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_NO_DATA_ALLOWED_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::NO_DATA_ALLOWED_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_NO_MODIFICATION_ALLOWED_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::NO_MODIFICATION_ALLOWED_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_NOT_FOUND_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::NOT_FOUND_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_NOT_SUPPORTED_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::NOT_SUPPORTED_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_INUSE_ATTRIBUTE_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::INUSE_ATTRIBUTE_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_INVALID_STATE_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::INVALID_STATE_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_SYNTAX_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::SYNTAX_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_INVALID_MODIFICATION_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::INVALID_MODIFICATION_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_NAMESPACE_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::NAMESPACE_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_INVALID_ACCESS_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::INVALID_ACCESS_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_VALIDATION_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::VALIDATION_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMException_TYPE_MISMATCH_ERR(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMException::TYPE_MISMATCH_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSObjectRef _wrap_new_DOMException__SWIG_0(JSContextRef context, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  short arg1 ;
  short arg2 ;
  XERCES_CPP_NAMESPACE::MemoryManager *arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *) (XERCES_CPP_NAMESPACE::MemoryManager *)0 ;
  short val1 ;
  int ecode1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  XERCES_CPP_NAMESPACE::DOMException *result;
  ecode1 = SWIG_AsVal_short SWIG_JSC_AS_CALL_ARGS(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DOMException" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = (short)(val1);
  ecode2 = SWIG_AsVal_short SWIG_JSC_AS_CALL_ARGS(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DOMException" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = (short)(val2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3,SWIGTYPE_p_XERCES_CPP_NAMESPACE__MemoryManager, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DOMException" "', argument " "3"" of type '" "XERCES_CPP_NAMESPACE::MemoryManager *const""'"); 
  }
  arg3 = (XERCES_CPP_NAMESPACE::MemoryManager *)(argp3);
  result = (XERCES_CPP_NAMESPACE::DOMException *)new XERCES_CPP_NAMESPACE::DOMException(arg1,arg2,arg3);
  
  
  
  
  
  return SWIG_JSC_NewPointerObj(context, result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException, SWIG_POINTER_OWN);
  
  goto fail;
fail:
  return NULL;
}


static JSObjectRef _wrap_new_DOMException__SWIG_1(JSContextRef context, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  short arg1 ;
  short arg2 ;
  short val1 ;
  int ecode1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  XERCES_CPP_NAMESPACE::DOMException *result;
  ecode1 = SWIG_AsVal_short SWIG_JSC_AS_CALL_ARGS(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DOMException" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = (short)(val1);
  ecode2 = SWIG_AsVal_short SWIG_JSC_AS_CALL_ARGS(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DOMException" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = (short)(val2);
  result = (XERCES_CPP_NAMESPACE::DOMException *)new XERCES_CPP_NAMESPACE::DOMException(arg1,arg2);
  
  
  
  
  return SWIG_JSC_NewPointerObj(context, result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException, SWIG_POINTER_OWN);
  
  goto fail;
fail:
  return NULL;
}


static JSObjectRef _wrap_new_DOMException__SWIG_2(JSContextRef context, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  short arg1 ;
  short val1 ;
  int ecode1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMException *result;
  ecode1 = SWIG_AsVal_short SWIG_JSC_AS_CALL_ARGS(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DOMException" "', argument " "1"" of type '" "short""'");
  } 
  arg1 = (short)(val1);
  result = (XERCES_CPP_NAMESPACE::DOMException *)new XERCES_CPP_NAMESPACE::DOMException(arg1);
  
  
  
  return SWIG_JSC_NewPointerObj(context, result, SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException, SWIG_POINTER_OWN);
  
  goto fail;
fail:
  return NULL;
}


static JSObjectRef _wrap_new_DOMException(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  JSObjectRef thisObject = NULL;
  
  // switch all cases by means of series of if-returns.
  
  if(argc == 3) {
    thisObject = _wrap_new_DOMException__SWIG_0(context, NULL, argc, argv, exception);
    if(thisObject != NULL) {
      *exception=0; return thisObject; 
    } /* reset exception and return */
  }
  
  if(argc == 2) {
    thisObject = _wrap_new_DOMException__SWIG_1(context, NULL, argc, argv, exception);
    if(thisObject != NULL) {
      *exception=0; return thisObject; 
    } /* reset exception and return */
  }
  
  if(argc == 1) {
    thisObject = _wrap_new_DOMException__SWIG_2(context, NULL, argc, argv, exception);
    if(thisObject != NULL) {
      *exception=0; return thisObject; 
    } /* reset exception and return */
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of $jsname");
  
fail:
  return thisObject;
}


static void _wrap_delete_DOMException(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMException * arg1 = (XERCES_CPP_NAMESPACE::DOMException *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSValueRef _wrap_DOMException_getMessage(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMException *arg1 = (XERCES_CPP_NAMESPACE::DOMException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMException_getMessage.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMException_getMessage" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMException const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMException *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMException const *)arg1)->getMessage();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static bool _wrap_DOMException_code_set(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef value, JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMException *arg1 = (XERCES_CPP_NAMESPACE::DOMException *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMException_code_set" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMException *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMException *)(argp1);
  ecode2 = SWIG_AsVal_short SWIG_JSC_AS_CALL_ARGS(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOMException_code_set" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = (short)(val2);
  if (arg1) (arg1)->code = arg2;
  
  
  
  
  return true;
  
  goto fail;
fail:
  return false;
}


static JSValueRef _wrap_DOMException_code_get(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMException *arg1 = (XERCES_CPP_NAMESPACE::DOMException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short result;
  
  JSValueRef jsresult;
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMException_code_get" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMException *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMException *)(argp1);
  result = (short) ((arg1)->code);
  jsresult = SWIG_From_short  SWIG_JSC_FROM_CALL_ARGS((short)(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static bool _wrap_DOMException_msg_set(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef value, JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMException *arg1 = (XERCES_CPP_NAMESPACE::DOMException *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMException_msg_set" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMException *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMException *)(argp1);
  
  arg2 = JS2XMLString(value, context);
  
  if (arg1) (arg1)->msg = (XMLCh const *)arg2;
  
  
  delete[] arg2;
  
  
  
  return true;
  
  goto fail;
fail:
  return false;
}


static JSValueRef _wrap_DOMException_msg_get(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMException *arg1 = (XERCES_CPP_NAMESPACE::DOMException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMException_msg_get" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMException *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMException *)(argp1);
  result = (XMLCh *) ((arg1)->msg);
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSStaticValue _exports_DOMException_staticValues[] = {
  {
    "INDEX_SIZE_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_INDEX_SIZE_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "DOMSTRING_SIZE_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_DOMSTRING_SIZE_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "HIERARCHY_REQUEST_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_HIERARCHY_REQUEST_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "WRONG_DOCUMENT_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_WRONG_DOCUMENT_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "INVALID_CHARACTER_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_INVALID_CHARACTER_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "NO_DATA_ALLOWED_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_NO_DATA_ALLOWED_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "NO_MODIFICATION_ALLOWED_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_NO_MODIFICATION_ALLOWED_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "NOT_FOUND_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_NOT_FOUND_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "NOT_SUPPORTED_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_NOT_SUPPORTED_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "INUSE_ATTRIBUTE_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_INUSE_ATTRIBUTE_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "INVALID_STATE_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_INVALID_STATE_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "SYNTAX_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_SYNTAX_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "INVALID_MODIFICATION_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_INVALID_MODIFICATION_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "NAMESPACE_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_NAMESPACE_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "INVALID_ACCESS_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_INVALID_ACCESS_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "VALIDATION_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_VALIDATION_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "TYPE_MISMATCH_ERR", _wrap_XERCES_CPP_NAMESPACE_DOMException_TYPE_MISMATCH_ERR, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMException_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMException_values[] = {
  {
    "code", _wrap_DOMException_code_get, _wrap_DOMException_code_set, kJSPropertyAttributeNone
  },
  
  
  {
    "msg", _wrap_DOMException_msg_get, _wrap_DOMException_msg_set, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMException_functions[] = {
  {
    "getMessage", _wrap_DOMException_getMessage, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0 
  }
};


static JSClassDefinition _exports_DOMNode_classDefinition;

static JSClassDefinition _exports_DOMNode_objectDefinition;

static JSClassRef _exports_DOMNode_classRef;


static void _wrap_delete_DOMNode(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMNode * arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_ELEMENT_NODE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::ELEMENT_NODE));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_ATTRIBUTE_NODE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::ATTRIBUTE_NODE));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_TEXT_NODE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::TEXT_NODE));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_CDATA_SECTION_NODE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::CDATA_SECTION_NODE));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_ENTITY_REFERENCE_NODE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::ENTITY_REFERENCE_NODE));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_ENTITY_NODE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::ENTITY_NODE));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_PROCESSING_INSTRUCTION_NODE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::PROCESSING_INSTRUCTION_NODE));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_COMMENT_NODE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::COMMENT_NODE));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_NODE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::DOCUMENT_NODE));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_TYPE_NODE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::DOCUMENT_TYPE_NODE));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_FRAGMENT_NODE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::DOCUMENT_FRAGMENT_NODE));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_NOTATION_NODE(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::NOTATION_NODE));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_POSITION_DISCONNECTED(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::DOCUMENT_POSITION_DISCONNECTED));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_POSITION_PRECEDING(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::DOCUMENT_POSITION_PRECEDING));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_POSITION_FOLLOWING(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::DOCUMENT_POSITION_FOLLOWING));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_POSITION_CONTAINS(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::DOCUMENT_POSITION_CONTAINS));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_POSITION_CONTAINED_BY(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::DOCUMENT_POSITION_CONTAINED_BY));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(XERCES_CPP_NAMESPACE::DOMNode::DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getNodeName(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getNodeName.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getNodeName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getNodeName();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getNodeValue(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getNodeValue.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getNodeValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getNodeValue();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getNodeType(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode::NodeType result;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getNodeType.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getNodeType" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMNode::NodeType)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getNodeType();
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getParentNode(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getParentNode.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getParentNode" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getParentNode();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getChildNodes(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNodeList *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getChildNodes.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getChildNodes" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMNodeList *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getChildNodes();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getFirstChild(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getFirstChild.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getFirstChild" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getFirstChild();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getLastChild(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getLastChild.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getLastChild" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getLastChild();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getPreviousSibling(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getPreviousSibling.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getPreviousSibling" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getPreviousSibling();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getNextSibling(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getNextSibling.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getNextSibling" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getNextSibling();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getAttributes(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNamedNodeMap *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getAttributes.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getAttributes" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getAttributes();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getOwnerDocument(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMDocument *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getOwnerDocument.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getOwnerDocument" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMDocument *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getOwnerDocument();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocument, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_cloneNode(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_cloneNode.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_cloneNode" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_JSC_AS_CALL_ARGS(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOMNode_cloneNode" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->cloneNode(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_insertBefore(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *arg3 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_insertBefore.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_insertBefore" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOMNode_insertBefore" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg2 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DOMNode_insertBefore" "', argument " "3"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg3 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp3);
  result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->insertBefore(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_replaceChild(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *arg3 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_replaceChild.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_replaceChild" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOMNode_replaceChild" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg2 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DOMNode_replaceChild" "', argument " "3"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg3 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp3);
  result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->replaceChild(arg2,arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_removeChild(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_removeChild.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_removeChild" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOMNode_removeChild" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg2 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp2);
  result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->removeChild(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_appendChild(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_appendChild.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_appendChild" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOMNode_appendChild" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg2 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp2);
  result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->appendChild(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_hasChildNodes(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_hasChildNodes.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_hasChildNodes" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (bool)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->hasChildNodes();
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_setNodeValue(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_setNodeValue.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_setNodeValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  (arg1)->setNodeValue((XMLCh const *)arg2);
  jsresult = JSValueMakeUndefined(context);
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_normalize(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_normalize.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_normalize" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  (arg1)->normalize();
  jsresult = JSValueMakeUndefined(context);
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_isSupported(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  XMLCh *arg3 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_isSupported.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_isSupported" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  
  arg3 = JS2XMLString(argv[1], context);
  
  result = (bool)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->isSupported((XMLCh const *)arg2,(XMLCh const *)arg3);
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  
  delete[] arg2;
  
  
  delete[] arg3;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getNamespaceURI(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getNamespaceURI.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getNamespaceURI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getNamespaceURI();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getLocalName(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getLocalName.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getLocalName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getLocalName();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_setPrefix(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_setPrefix.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_setPrefix" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  (arg1)->setPrefix((XMLCh const *)arg2);
  jsresult = JSValueMakeUndefined(context);
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_hasAttributes(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_hasAttributes.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_hasAttributes" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (bool)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->hasAttributes();
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_isSameNode(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_isSameNode.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_isSameNode" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOMNode_isSameNode" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg2 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp2);
  result = (bool)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->isSameNode((XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_isEqualNode(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_isEqualNode.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_isEqualNode" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOMNode_isEqualNode" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg2 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp2);
  result = (bool)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->isEqualNode((XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_setUserData(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *arg3 = (void *) 0 ;
  XERCES_CPP_NAMESPACE::DOMUserDataHandler *arg4 = (XERCES_CPP_NAMESPACE::DOMUserDataHandler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_setUserData.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_setUserData" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  res3 = SWIG_ConvertPtr(argv[1],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DOMNode_setUserData" "', argument " "3"" of type '" "void *""'"); 
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMUserDataHandler, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DOMNode_setUserData" "', argument " "4"" of type '" "XERCES_CPP_NAMESPACE::DOMUserDataHandler *""'"); 
  }
  arg4 = (XERCES_CPP_NAMESPACE::DOMUserDataHandler *)(argp4);
  result = (void *)(arg1)->setUserData((XMLCh const *)arg2,arg3,arg4);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  delete[] arg2;
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getUserData(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getUserData.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getUserData" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  result = (void *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getUserData((XMLCh const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getBaseURI(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getBaseURI.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getBaseURI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getBaseURI();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_compareDocumentPosition(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  short result;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_compareDocumentPosition.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_compareDocumentPosition" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOMNode_compareDocumentPosition" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg2 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp2);
  result = (short)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->compareDocumentPosition((XERCES_CPP_NAMESPACE::DOMNode const *)arg2);
  jsresult = SWIG_From_short  SWIG_JSC_FROM_CALL_ARGS((short)(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getTextContent(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getTextContent.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getTextContent" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getTextContent();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_setTextContent(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_setTextContent.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_setTextContent" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  (arg1)->setTextContent((XMLCh const *)arg2);
  jsresult = JSValueMakeUndefined(context);
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_lookupPrefix(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_lookupPrefix.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_lookupPrefix" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->lookupPrefix((XMLCh const *)arg2);
  
  jsresult = XMLString2JS(result, context);
  
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_isDefaultNamespace(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_isDefaultNamespace.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_isDefaultNamespace" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  result = (bool)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->isDefaultNamespace((XMLCh const *)arg2);
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_lookupNamespaceURI(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_lookupNamespaceURI.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_lookupNamespaceURI" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->lookupNamespaceURI((XMLCh const *)arg2);
  
  jsresult = XMLString2JS(result, context);
  
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_getFeature(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  XMLCh *arg3 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_getFeature.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_getFeature" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  
  arg3 = JS2XMLString(argv[1], context);
  
  result = (void *)((XERCES_CPP_NAMESPACE::DOMNode const *)arg1)->getFeature((XMLCh const *)arg2,(XMLCh const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  delete[] arg2;
  
  
  delete[] arg3;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNode_release(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNode *arg1 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNode_release.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNode_release" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp1);
  (arg1)->release();
  jsresult = JSValueMakeUndefined(context);
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSStaticValue _exports_DOMNode_staticValues[] = {
  {
    "ELEMENT_NODE", _wrap_XERCES_CPP_NAMESPACE_DOMNode_ELEMENT_NODE, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "ATTRIBUTE_NODE", _wrap_XERCES_CPP_NAMESPACE_DOMNode_ATTRIBUTE_NODE, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "TEXT_NODE", _wrap_XERCES_CPP_NAMESPACE_DOMNode_TEXT_NODE, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "CDATA_SECTION_NODE", _wrap_XERCES_CPP_NAMESPACE_DOMNode_CDATA_SECTION_NODE, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "ENTITY_REFERENCE_NODE", _wrap_XERCES_CPP_NAMESPACE_DOMNode_ENTITY_REFERENCE_NODE, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "ENTITY_NODE", _wrap_XERCES_CPP_NAMESPACE_DOMNode_ENTITY_NODE, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "PROCESSING_INSTRUCTION_NODE", _wrap_XERCES_CPP_NAMESPACE_DOMNode_PROCESSING_INSTRUCTION_NODE, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "COMMENT_NODE", _wrap_XERCES_CPP_NAMESPACE_DOMNode_COMMENT_NODE, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "DOCUMENT_NODE", _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_NODE, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "DOCUMENT_TYPE_NODE", _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_TYPE_NODE, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "DOCUMENT_FRAGMENT_NODE", _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_FRAGMENT_NODE, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "NOTATION_NODE", _wrap_XERCES_CPP_NAMESPACE_DOMNode_NOTATION_NODE, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "DOCUMENT_POSITION_DISCONNECTED", _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_POSITION_DISCONNECTED, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "DOCUMENT_POSITION_PRECEDING", _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_POSITION_PRECEDING, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "DOCUMENT_POSITION_FOLLOWING", _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_POSITION_FOLLOWING, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "DOCUMENT_POSITION_CONTAINS", _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_POSITION_CONTAINS, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "DOCUMENT_POSITION_CONTAINED_BY", _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_POSITION_CONTAINED_BY, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", _wrap_XERCES_CPP_NAMESPACE_DOMNode_DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMNode_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMNode_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMNode_functions[] = {
  {
    "getNodeName", _wrap_DOMNode_getNodeName, kJSPropertyAttributeNone
  },
  
  
  {
    "getNodeValue", _wrap_DOMNode_getNodeValue, kJSPropertyAttributeNone
  },
  
  
  {
    "getNodeType", _wrap_DOMNode_getNodeType, kJSPropertyAttributeNone
  },
  
  
  {
    "getParentNode", _wrap_DOMNode_getParentNode, kJSPropertyAttributeNone
  },
  
  
  {
    "getChildNodes", _wrap_DOMNode_getChildNodes, kJSPropertyAttributeNone
  },
  
  
  {
    "getFirstChild", _wrap_DOMNode_getFirstChild, kJSPropertyAttributeNone
  },
  
  
  {
    "getLastChild", _wrap_DOMNode_getLastChild, kJSPropertyAttributeNone
  },
  
  
  {
    "getPreviousSibling", _wrap_DOMNode_getPreviousSibling, kJSPropertyAttributeNone
  },
  
  
  {
    "getNextSibling", _wrap_DOMNode_getNextSibling, kJSPropertyAttributeNone
  },
  
  
  {
    "getAttributes", _wrap_DOMNode_getAttributes, kJSPropertyAttributeNone
  },
  
  
  {
    "getOwnerDocument", _wrap_DOMNode_getOwnerDocument, kJSPropertyAttributeNone
  },
  
  
  {
    "cloneNode", _wrap_DOMNode_cloneNode, kJSPropertyAttributeNone
  },
  
  
  {
    "insertBefore", _wrap_DOMNode_insertBefore, kJSPropertyAttributeNone
  },
  
  
  {
    "replaceChild", _wrap_DOMNode_replaceChild, kJSPropertyAttributeNone
  },
  
  
  {
    "removeChild", _wrap_DOMNode_removeChild, kJSPropertyAttributeNone
  },
  
  
  {
    "appendChild", _wrap_DOMNode_appendChild, kJSPropertyAttributeNone
  },
  
  
  {
    "hasChildNodes", _wrap_DOMNode_hasChildNodes, kJSPropertyAttributeNone
  },
  
  
  {
    "setNodeValue", _wrap_DOMNode_setNodeValue, kJSPropertyAttributeNone
  },
  
  
  {
    "normalize", _wrap_DOMNode_normalize, kJSPropertyAttributeNone
  },
  
  
  {
    "isSupported", _wrap_DOMNode_isSupported, kJSPropertyAttributeNone
  },
  
  
  {
    "getNamespaceURI", _wrap_DOMNode_getNamespaceURI, kJSPropertyAttributeNone
  },
  
  
  {
    "getLocalName", _wrap_DOMNode_getLocalName, kJSPropertyAttributeNone
  },
  
  
  {
    "setPrefix", _wrap_DOMNode_setPrefix, kJSPropertyAttributeNone
  },
  
  
  {
    "hasAttributes", _wrap_DOMNode_hasAttributes, kJSPropertyAttributeNone
  },
  
  
  {
    "isSameNode", _wrap_DOMNode_isSameNode, kJSPropertyAttributeNone
  },
  
  
  {
    "isEqualNode", _wrap_DOMNode_isEqualNode, kJSPropertyAttributeNone
  },
  
  
  {
    "setUserData", _wrap_DOMNode_setUserData, kJSPropertyAttributeNone
  },
  
  
  {
    "getUserData", _wrap_DOMNode_getUserData, kJSPropertyAttributeNone
  },
  
  
  {
    "getBaseURI", _wrap_DOMNode_getBaseURI, kJSPropertyAttributeNone
  },
  
  
  {
    "compareDocumentPosition", _wrap_DOMNode_compareDocumentPosition, kJSPropertyAttributeNone
  },
  
  
  {
    "getTextContent", _wrap_DOMNode_getTextContent, kJSPropertyAttributeNone
  },
  
  
  {
    "setTextContent", _wrap_DOMNode_setTextContent, kJSPropertyAttributeNone
  },
  
  
  {
    "lookupPrefix", _wrap_DOMNode_lookupPrefix, kJSPropertyAttributeNone
  },
  
  
  {
    "isDefaultNamespace", _wrap_DOMNode_isDefaultNamespace, kJSPropertyAttributeNone
  },
  
  
  {
    "lookupNamespaceURI", _wrap_DOMNode_lookupNamespaceURI, kJSPropertyAttributeNone
  },
  
  
  {
    "getFeature", _wrap_DOMNode_getFeature, kJSPropertyAttributeNone
  },
  
  
  {
    "release", _wrap_DOMNode_release, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMNode(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMNode can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_DOMAttr_classDefinition;

static JSClassDefinition _exports_DOMAttr_objectDefinition;

static JSClassRef _exports_DOMAttr_classRef;


static void _wrap_delete_DOMAttr(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMAttr * arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSValueRef _wrap_DOMAttr_getName(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMAttr_getName.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMAttr_getName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMAttr const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMAttr const *)arg1)->getName();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMAttr_getSpecified(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMAttr_getSpecified.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMAttr_getSpecified" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMAttr const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *)(argp1);
  result = (bool)((XERCES_CPP_NAMESPACE::DOMAttr const *)arg1)->getSpecified();
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMAttr_getValue(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMAttr_getValue.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMAttr_getValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMAttr const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMAttr const *)arg1)->getValue();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMAttr_setValue(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMAttr_setValue.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMAttr_setValue" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMAttr *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  (arg1)->setValue((XMLCh const *)arg2);
  jsresult = JSValueMakeUndefined(context);
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMAttr_getOwnerElement(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMElement *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMAttr_getOwnerElement.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMAttr_getOwnerElement" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMAttr const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMElement *)((XERCES_CPP_NAMESPACE::DOMAttr const *)arg1)->getOwnerElement();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMAttr_isId(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMAttr_isId.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMAttr_isId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMAttr const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *)(argp1);
  result = (bool)((XERCES_CPP_NAMESPACE::DOMAttr const *)arg1)->isId();
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMAttr_getSchemaTypeInfo(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMAttr *arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMTypeInfo *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMAttr_getSchemaTypeInfo.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMAttr_getSchemaTypeInfo" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMAttr const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMAttr *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMTypeInfo *)((XERCES_CPP_NAMESPACE::DOMAttr const *)arg1)->getSchemaTypeInfo();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTypeInfo, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSStaticValue _exports_DOMAttr_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMAttr_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMAttr_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMAttr_functions[] = {
  {
    "getName", _wrap_DOMAttr_getName, kJSPropertyAttributeNone
  },
  
  
  {
    "getSpecified", _wrap_DOMAttr_getSpecified, kJSPropertyAttributeNone
  },
  
  
  {
    "getValue", _wrap_DOMAttr_getValue, kJSPropertyAttributeNone
  },
  
  
  {
    "setValue", _wrap_DOMAttr_setValue, kJSPropertyAttributeNone
  },
  
  
  {
    "getOwnerElement", _wrap_DOMAttr_getOwnerElement, kJSPropertyAttributeNone
  },
  
  
  {
    "isId", _wrap_DOMAttr_isId, kJSPropertyAttributeNone
  },
  
  
  {
    "getSchemaTypeInfo", _wrap_DOMAttr_getSchemaTypeInfo, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMAttr(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMAttr can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_DOMElement_classDefinition;

static JSClassDefinition _exports_DOMElement_objectDefinition;

static JSClassRef _exports_DOMElement_classRef;


static void _wrap_delete_DOMElement(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMElement * arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSValueRef _wrap_DOMElement_getTagName(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_getTagName.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_getTagName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getTagName();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_getAttribute(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_getAttribute.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_getAttribute" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getAttribute((XMLCh const *)arg2);
  
  jsresult = XMLString2JS(result, context);
  
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_getAttributeNode(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMAttr *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_getAttributeNode.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_getAttributeNode" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  result = (XERCES_CPP_NAMESPACE::DOMAttr *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getAttributeNode((XMLCh const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_getElementsByTagName(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNodeList *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_getElementsByTagName.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_getElementsByTagName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  result = (XERCES_CPP_NAMESPACE::DOMNodeList *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getElementsByTagName((XMLCh const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList, 0 |  0 );
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_setAttribute(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  XMLCh *arg3 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_setAttribute.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_setAttribute" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  
  arg3 = JS2XMLString(argv[1], context);
  
  (arg1)->setAttribute((XMLCh const *)arg2,(XMLCh const *)arg3);
  jsresult = JSValueMakeUndefined(context);
  
  
  delete[] arg2;
  
  
  delete[] arg3;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_setAttributeNode(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XERCES_CPP_NAMESPACE::DOMAttr *arg2 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  XERCES_CPP_NAMESPACE::DOMAttr *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_setAttributeNode.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_setAttributeNode" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOMElement_setAttributeNode" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DOMAttr *""'"); 
  }
  arg2 = (XERCES_CPP_NAMESPACE::DOMAttr *)(argp2);
  result = (XERCES_CPP_NAMESPACE::DOMAttr *)(arg1)->setAttributeNode(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_removeAttributeNode(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XERCES_CPP_NAMESPACE::DOMAttr *arg2 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  XERCES_CPP_NAMESPACE::DOMAttr *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_removeAttributeNode.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_removeAttributeNode" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOMElement_removeAttributeNode" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DOMAttr *""'"); 
  }
  arg2 = (XERCES_CPP_NAMESPACE::DOMAttr *)(argp2);
  result = (XERCES_CPP_NAMESPACE::DOMAttr *)(arg1)->removeAttributeNode(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_removeAttribute(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_removeAttribute.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_removeAttribute" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  (arg1)->removeAttribute((XMLCh const *)arg2);
  jsresult = JSValueMakeUndefined(context);
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_getAttributeNS(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  XMLCh *arg3 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_getAttributeNS.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_getAttributeNS" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  
  arg3 = JS2XMLString(argv[1], context);
  
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getAttributeNS((XMLCh const *)arg2,(XMLCh const *)arg3);
  
  jsresult = XMLString2JS(result, context);
  
  
  
  delete[] arg2;
  
  
  delete[] arg3;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_setAttributeNS(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  XMLCh *arg3 = (XMLCh *) 0 ;
  XMLCh *arg4 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_setAttributeNS.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_setAttributeNS" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  
  arg3 = JS2XMLString(argv[1], context);
  
  
  arg4 = JS2XMLString(argv[2], context);
  
  (arg1)->setAttributeNS((XMLCh const *)arg2,(XMLCh const *)arg3,(XMLCh const *)arg4);
  jsresult = JSValueMakeUndefined(context);
  
  
  delete[] arg2;
  
  
  delete[] arg3;
  
  
  delete[] arg4;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_removeAttributeNS(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  XMLCh *arg3 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_removeAttributeNS.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_removeAttributeNS" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  
  arg3 = JS2XMLString(argv[1], context);
  
  (arg1)->removeAttributeNS((XMLCh const *)arg2,(XMLCh const *)arg3);
  jsresult = JSValueMakeUndefined(context);
  
  
  delete[] arg2;
  
  
  delete[] arg3;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_getAttributeNodeNS(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  XMLCh *arg3 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMAttr *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_getAttributeNodeNS.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_getAttributeNodeNS" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  
  arg3 = JS2XMLString(argv[1], context);
  
  result = (XERCES_CPP_NAMESPACE::DOMAttr *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getAttributeNodeNS((XMLCh const *)arg2,(XMLCh const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  
  
  delete[] arg2;
  
  
  delete[] arg3;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_setAttributeNodeNS(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XERCES_CPP_NAMESPACE::DOMAttr *arg2 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  XERCES_CPP_NAMESPACE::DOMAttr *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_setAttributeNodeNS.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_setAttributeNodeNS" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOMElement_setAttributeNodeNS" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DOMAttr *""'"); 
  }
  arg2 = (XERCES_CPP_NAMESPACE::DOMAttr *)(argp2);
  result = (XERCES_CPP_NAMESPACE::DOMAttr *)(arg1)->setAttributeNodeNS(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_getElementsByTagNameNS(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  XMLCh *arg3 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNodeList *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_getElementsByTagNameNS.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_getElementsByTagNameNS" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  
  arg3 = JS2XMLString(argv[1], context);
  
  result = (XERCES_CPP_NAMESPACE::DOMNodeList *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getElementsByTagNameNS((XMLCh const *)arg2,(XMLCh const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList, 0 |  0 );
  
  
  delete[] arg2;
  
  
  delete[] arg3;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_hasAttribute(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_hasAttribute.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_hasAttribute" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  result = (bool)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->hasAttribute((XMLCh const *)arg2);
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_hasAttributeNS(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  XMLCh *arg3 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_hasAttributeNS.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_hasAttributeNS" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  
  arg3 = JS2XMLString(argv[1], context);
  
  result = (bool)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->hasAttributeNS((XMLCh const *)arg2,(XMLCh const *)arg3);
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  
  delete[] arg2;
  
  
  delete[] arg3;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_setIdAttribute(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_setIdAttribute.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_setIdAttribute" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  ecode3 = SWIG_AsVal_bool SWIG_JSC_AS_CALL_ARGS(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DOMElement_setIdAttribute" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  (arg1)->setIdAttribute((XMLCh const *)arg2,arg3);
  jsresult = JSValueMakeUndefined(context);
  
  
  delete[] arg2;
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_setIdAttributeNS(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  XMLCh *arg3 = (XMLCh *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_setIdAttributeNS.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_setIdAttributeNS" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  
  arg3 = JS2XMLString(argv[1], context);
  
  ecode4 = SWIG_AsVal_bool SWIG_JSC_AS_CALL_ARGS(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DOMElement_setIdAttributeNS" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = (bool)(val4);
  (arg1)->setIdAttributeNS((XMLCh const *)arg2,(XMLCh const *)arg3,arg4);
  jsresult = JSValueMakeUndefined(context);
  
  
  delete[] arg2;
  
  
  delete[] arg3;
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_setIdAttributeNode(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  XERCES_CPP_NAMESPACE::DOMAttr *arg2 = (XERCES_CPP_NAMESPACE::DOMAttr *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_setIdAttributeNode.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_setIdAttributeNode" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOMElement_setIdAttributeNode" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DOMAttr const *""'"); 
  }
  arg2 = (XERCES_CPP_NAMESPACE::DOMAttr *)(argp2);
  ecode3 = SWIG_AsVal_bool SWIG_JSC_AS_CALL_ARGS(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DOMElement_setIdAttributeNode" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  (arg1)->setIdAttributeNode((XERCES_CPP_NAMESPACE::DOMAttr const *)arg2,arg3);
  jsresult = JSValueMakeUndefined(context);
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_getSchemaTypeInfo(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMTypeInfo *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_getSchemaTypeInfo.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_getSchemaTypeInfo" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMTypeInfo *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getSchemaTypeInfo();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMTypeInfo, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_getFirstElementChild(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMElement *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_getFirstElementChild.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_getFirstElementChild" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMElement *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getFirstElementChild();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_getLastElementChild(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMElement *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_getLastElementChild.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_getLastElementChild" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMElement *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getLastElementChild();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_getPreviousElementSibling(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMElement *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_getPreviousElementSibling.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_getPreviousElementSibling" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMElement *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getPreviousElementSibling();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_getNextElementSibling(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMElement *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_getNextElementSibling.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_getNextElementSibling" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMElement *)((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getNextElementSibling();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMElement_getChildElementCount(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMElement *arg1 = (XERCES_CPP_NAMESPACE::DOMElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLSize_t result;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMElement_getChildElementCount.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMElement_getChildElementCount" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMElement const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMElement *)(argp1);
  result = ((XERCES_CPP_NAMESPACE::DOMElement const *)arg1)->getChildElementCount();
  jsresult = SWIG_From_size_t  SWIG_JSC_FROM_CALL_ARGS((size_t)(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSStaticValue _exports_DOMElement_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMElement_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMElement_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMElement_functions[] = {
  {
    "getTagName", _wrap_DOMElement_getTagName, kJSPropertyAttributeNone
  },
  
  
  {
    "getAttribute", _wrap_DOMElement_getAttribute, kJSPropertyAttributeNone
  },
  
  
  {
    "getAttributeNode", _wrap_DOMElement_getAttributeNode, kJSPropertyAttributeNone
  },
  
  
  {
    "getElementsByTagName", _wrap_DOMElement_getElementsByTagName, kJSPropertyAttributeNone
  },
  
  
  {
    "setAttribute", _wrap_DOMElement_setAttribute, kJSPropertyAttributeNone
  },
  
  
  {
    "setAttributeNode", _wrap_DOMElement_setAttributeNode, kJSPropertyAttributeNone
  },
  
  
  {
    "removeAttributeNode", _wrap_DOMElement_removeAttributeNode, kJSPropertyAttributeNone
  },
  
  
  {
    "removeAttribute", _wrap_DOMElement_removeAttribute, kJSPropertyAttributeNone
  },
  
  
  {
    "getAttributeNS", _wrap_DOMElement_getAttributeNS, kJSPropertyAttributeNone
  },
  
  
  {
    "setAttributeNS", _wrap_DOMElement_setAttributeNS, kJSPropertyAttributeNone
  },
  
  
  {
    "removeAttributeNS", _wrap_DOMElement_removeAttributeNS, kJSPropertyAttributeNone
  },
  
  
  {
    "getAttributeNodeNS", _wrap_DOMElement_getAttributeNodeNS, kJSPropertyAttributeNone
  },
  
  
  {
    "setAttributeNodeNS", _wrap_DOMElement_setAttributeNodeNS, kJSPropertyAttributeNone
  },
  
  
  {
    "getElementsByTagNameNS", _wrap_DOMElement_getElementsByTagNameNS, kJSPropertyAttributeNone
  },
  
  
  {
    "hasAttribute", _wrap_DOMElement_hasAttribute, kJSPropertyAttributeNone
  },
  
  
  {
    "hasAttributeNS", _wrap_DOMElement_hasAttributeNS, kJSPropertyAttributeNone
  },
  
  
  {
    "setIdAttribute", _wrap_DOMElement_setIdAttribute, kJSPropertyAttributeNone
  },
  
  
  {
    "setIdAttributeNS", _wrap_DOMElement_setIdAttributeNS, kJSPropertyAttributeNone
  },
  
  
  {
    "setIdAttributeNode", _wrap_DOMElement_setIdAttributeNode, kJSPropertyAttributeNone
  },
  
  
  {
    "getSchemaTypeInfo", _wrap_DOMElement_getSchemaTypeInfo, kJSPropertyAttributeNone
  },
  
  
  {
    "getFirstElementChild", _wrap_DOMElement_getFirstElementChild, kJSPropertyAttributeNone
  },
  
  
  {
    "getLastElementChild", _wrap_DOMElement_getLastElementChild, kJSPropertyAttributeNone
  },
  
  
  {
    "getPreviousElementSibling", _wrap_DOMElement_getPreviousElementSibling, kJSPropertyAttributeNone
  },
  
  
  {
    "getNextElementSibling", _wrap_DOMElement_getNextElementSibling, kJSPropertyAttributeNone
  },
  
  
  {
    "getChildElementCount", _wrap_DOMElement_getChildElementCount, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMElement(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMElement can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_DOMEntity_classDefinition;

static JSClassDefinition _exports_DOMEntity_objectDefinition;

static JSClassRef _exports_DOMEntity_classRef;


static void _wrap_delete_DOMEntity(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMEntity * arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSValueRef _wrap_DOMEntity_getPublicId(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMEntity_getPublicId.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMEntity_getPublicId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMEntity const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMEntity const *)arg1)->getPublicId();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMEntity_getSystemId(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMEntity_getSystemId.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMEntity_getSystemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMEntity const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMEntity const *)arg1)->getSystemId();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMEntity_getNotationName(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMEntity_getNotationName.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMEntity_getNotationName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMEntity const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMEntity const *)arg1)->getNotationName();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMEntity_getInputEncoding(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMEntity_getInputEncoding.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMEntity_getInputEncoding" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMEntity const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMEntity const *)arg1)->getInputEncoding();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMEntity_getXmlEncoding(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMEntity_getXmlEncoding.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMEntity_getXmlEncoding" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMEntity const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMEntity const *)arg1)->getXmlEncoding();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMEntity_getXmlVersion(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMEntity *arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMEntity_getXmlVersion.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMEntity_getXmlVersion" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMEntity const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMEntity *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMEntity const *)arg1)->getXmlVersion();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSStaticValue _exports_DOMEntity_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMEntity_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMEntity_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMEntity_functions[] = {
  {
    "getPublicId", _wrap_DOMEntity_getPublicId, kJSPropertyAttributeNone
  },
  
  
  {
    "getSystemId", _wrap_DOMEntity_getSystemId, kJSPropertyAttributeNone
  },
  
  
  {
    "getNotationName", _wrap_DOMEntity_getNotationName, kJSPropertyAttributeNone
  },
  
  
  {
    "getInputEncoding", _wrap_DOMEntity_getInputEncoding, kJSPropertyAttributeNone
  },
  
  
  {
    "getXmlEncoding", _wrap_DOMEntity_getXmlEncoding, kJSPropertyAttributeNone
  },
  
  
  {
    "getXmlVersion", _wrap_DOMEntity_getXmlVersion, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMEntity(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMEntity can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_DOMDocumentType_classDefinition;

static JSClassDefinition _exports_DOMDocumentType_objectDefinition;

static JSClassRef _exports_DOMDocumentType_classRef;


static void _wrap_delete_DOMDocumentType(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMDocumentType * arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSValueRef _wrap_DOMDocumentType_getName(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMDocumentType *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMDocumentType_getName.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMDocumentType_getName" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMDocumentType const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMDocumentType const *)arg1)->getName();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMDocumentType_getEntities(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMDocumentType *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNamedNodeMap *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMDocumentType_getEntities.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMDocumentType_getEntities" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMDocumentType const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)((XERCES_CPP_NAMESPACE::DOMDocumentType const *)arg1)->getEntities();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMDocumentType_getNotations(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMDocumentType *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNamedNodeMap *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMDocumentType_getNotations.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMDocumentType_getNotations" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMDocumentType const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *)(argp1);
  result = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)((XERCES_CPP_NAMESPACE::DOMDocumentType const *)arg1)->getNotations();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMDocumentType_getPublicId(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMDocumentType *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMDocumentType_getPublicId.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMDocumentType_getPublicId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMDocumentType const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMDocumentType const *)arg1)->getPublicId();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMDocumentType_getSystemId(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMDocumentType *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMDocumentType_getSystemId.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMDocumentType_getSystemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMDocumentType const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMDocumentType const *)arg1)->getSystemId();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMDocumentType_getInternalSubset(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMDocumentType *arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMDocumentType_getInternalSubset.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMDocumentType_getInternalSubset" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMDocumentType const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentType *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMDocumentType const *)arg1)->getInternalSubset();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSStaticValue _exports_DOMDocumentType_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMDocumentType_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMDocumentType_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMDocumentType_functions[] = {
  {
    "getName", _wrap_DOMDocumentType_getName, kJSPropertyAttributeNone
  },
  
  
  {
    "getEntities", _wrap_DOMDocumentType_getEntities, kJSPropertyAttributeNone
  },
  
  
  {
    "getNotations", _wrap_DOMDocumentType_getNotations, kJSPropertyAttributeNone
  },
  
  
  {
    "getPublicId", _wrap_DOMDocumentType_getPublicId, kJSPropertyAttributeNone
  },
  
  
  {
    "getSystemId", _wrap_DOMDocumentType_getSystemId, kJSPropertyAttributeNone
  },
  
  
  {
    "getInternalSubset", _wrap_DOMDocumentType_getInternalSubset, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMDocumentType(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMDocumentType can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_DOMCharacterData_classDefinition;

static JSClassDefinition _exports_DOMCharacterData_objectDefinition;

static JSClassRef _exports_DOMCharacterData_classRef;


static void _wrap_delete_DOMCharacterData(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMCharacterData * arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSValueRef _wrap_DOMCharacterData_getData(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMCharacterData_getData.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMCharacterData_getData" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMCharacterData const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMCharacterData const *)arg1)->getData();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMCharacterData_getLength(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLSize_t result;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMCharacterData_getLength.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMCharacterData_getLength" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMCharacterData const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *)(argp1);
  result = ((XERCES_CPP_NAMESPACE::DOMCharacterData const *)arg1)->getLength();
  jsresult = SWIG_From_size_t  SWIG_JSC_FROM_CALL_ARGS((size_t)(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMCharacterData_substringData(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
  XMLSize_t arg2 ;
  XMLSize_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMCharacterData_substringData.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMCharacterData_substringData" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMCharacterData const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *)(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_JSC_AS_CALL_ARGS(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOMCharacterData_substringData" "', argument " "2"" of type '" "XMLSize_t""'");
  } 
  arg2 = (XMLSize_t)(val2);
  ecode3 = SWIG_AsVal_size_t SWIG_JSC_AS_CALL_ARGS(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DOMCharacterData_substringData" "', argument " "3"" of type '" "XMLSize_t""'");
  } 
  arg3 = (XMLSize_t)(val3);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMCharacterData const *)arg1)->substringData(arg2,arg3);
  
  jsresult = XMLString2JS(result, context);
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMCharacterData_appendData(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMCharacterData_appendData.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMCharacterData_appendData" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMCharacterData *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  (arg1)->appendData((XMLCh const *)arg2);
  jsresult = JSValueMakeUndefined(context);
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMCharacterData_insertData(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
  XMLSize_t arg2 ;
  XMLCh *arg3 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMCharacterData_insertData.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMCharacterData_insertData" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMCharacterData *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *)(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_JSC_AS_CALL_ARGS(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOMCharacterData_insertData" "', argument " "2"" of type '" "XMLSize_t""'");
  } 
  arg2 = (XMLSize_t)(val2);
  
  arg3 = JS2XMLString(argv[1], context);
  
  (arg1)->insertData(arg2,(XMLCh const *)arg3);
  jsresult = JSValueMakeUndefined(context);
  
  
  
  delete[] arg3;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMCharacterData_deleteData(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
  XMLSize_t arg2 ;
  XMLSize_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMCharacterData_deleteData.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMCharacterData_deleteData" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMCharacterData *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *)(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_JSC_AS_CALL_ARGS(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOMCharacterData_deleteData" "', argument " "2"" of type '" "XMLSize_t""'");
  } 
  arg2 = (XMLSize_t)(val2);
  ecode3 = SWIG_AsVal_size_t SWIG_JSC_AS_CALL_ARGS(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DOMCharacterData_deleteData" "', argument " "3"" of type '" "XMLSize_t""'");
  } 
  arg3 = (XMLSize_t)(val3);
  (arg1)->deleteData(arg2,arg3);
  jsresult = JSValueMakeUndefined(context);
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMCharacterData_replaceData(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
  XMLSize_t arg2 ;
  XMLSize_t arg3 ;
  XMLCh *arg4 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMCharacterData_replaceData.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMCharacterData_replaceData" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMCharacterData *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *)(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_JSC_AS_CALL_ARGS(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOMCharacterData_replaceData" "', argument " "2"" of type '" "XMLSize_t""'");
  } 
  arg2 = (XMLSize_t)(val2);
  ecode3 = SWIG_AsVal_size_t SWIG_JSC_AS_CALL_ARGS(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DOMCharacterData_replaceData" "', argument " "3"" of type '" "XMLSize_t""'");
  } 
  arg3 = (XMLSize_t)(val3);
  
  arg4 = JS2XMLString(argv[2], context);
  
  (arg1)->replaceData(arg2,arg3,(XMLCh const *)arg4);
  jsresult = JSValueMakeUndefined(context);
  
  
  
  
  delete[] arg4;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMCharacterData_setData(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMCharacterData *arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMCharacterData_setData.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMCharacterData_setData" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMCharacterData *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMCharacterData *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  (arg1)->setData((XMLCh const *)arg2);
  jsresult = JSValueMakeUndefined(context);
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSStaticValue _exports_DOMCharacterData_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMCharacterData_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMCharacterData_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMCharacterData_functions[] = {
  {
    "getData", _wrap_DOMCharacterData_getData, kJSPropertyAttributeNone
  },
  
  
  {
    "getLength", _wrap_DOMCharacterData_getLength, kJSPropertyAttributeNone
  },
  
  
  {
    "substringData", _wrap_DOMCharacterData_substringData, kJSPropertyAttributeNone
  },
  
  
  {
    "appendData", _wrap_DOMCharacterData_appendData, kJSPropertyAttributeNone
  },
  
  
  {
    "insertData", _wrap_DOMCharacterData_insertData, kJSPropertyAttributeNone
  },
  
  
  {
    "deleteData", _wrap_DOMCharacterData_deleteData, kJSPropertyAttributeNone
  },
  
  
  {
    "replaceData", _wrap_DOMCharacterData_replaceData, kJSPropertyAttributeNone
  },
  
  
  {
    "setData", _wrap_DOMCharacterData_setData, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMCharacterData(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMCharacterData can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_DOMComment_classDefinition;

static JSClassDefinition _exports_DOMComment_objectDefinition;

static JSClassRef _exports_DOMComment_classRef;


static void _wrap_delete_DOMComment(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMComment * arg1 = (XERCES_CPP_NAMESPACE::DOMComment *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSStaticValue _exports_DOMComment_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMComment_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMComment_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMComment_functions[] = {
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMComment(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMComment can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_DOMText_classDefinition;

static JSClassDefinition _exports_DOMText_objectDefinition;

static JSClassRef _exports_DOMText_classRef;


static void _wrap_delete_DOMText(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMText * arg1 = (XERCES_CPP_NAMESPACE::DOMText *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSValueRef _wrap_DOMText_splitText(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMText *arg1 = (XERCES_CPP_NAMESPACE::DOMText *) 0 ;
  XMLSize_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  XERCES_CPP_NAMESPACE::DOMText *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMText_splitText.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMText_splitText" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMText *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMText *)(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_JSC_AS_CALL_ARGS(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOMText_splitText" "', argument " "2"" of type '" "XMLSize_t""'");
  } 
  arg2 = (XMLSize_t)(val2);
  result = (XERCES_CPP_NAMESPACE::DOMText *)(arg1)->splitText(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText, 0 |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMText_getIsElementContentWhitespace(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMText *arg1 = (XERCES_CPP_NAMESPACE::DOMText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMText_getIsElementContentWhitespace.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMText_getIsElementContentWhitespace" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMText const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMText *)(argp1);
  result = (bool)((XERCES_CPP_NAMESPACE::DOMText const *)arg1)->getIsElementContentWhitespace();
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMText_getWholeText(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMText *arg1 = (XERCES_CPP_NAMESPACE::DOMText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMText_getWholeText.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMText_getWholeText" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMText const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMText *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMText const *)arg1)->getWholeText();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMText_replaceWholeText(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMText *arg1 = (XERCES_CPP_NAMESPACE::DOMText *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMText *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMText_replaceWholeText.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMText_replaceWholeText" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMText *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMText *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  result = (XERCES_CPP_NAMESPACE::DOMText *)(arg1)->replaceWholeText((XMLCh const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText, 0 |  0 );
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMText_isIgnorableWhitespace(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMText *arg1 = (XERCES_CPP_NAMESPACE::DOMText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMText_isIgnorableWhitespace.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMText_isIgnorableWhitespace" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMText const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMText *)(argp1);
  result = (bool)((XERCES_CPP_NAMESPACE::DOMText const *)arg1)->isIgnorableWhitespace();
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSStaticValue _exports_DOMText_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMText_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMText_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMText_functions[] = {
  {
    "splitText", _wrap_DOMText_splitText, kJSPropertyAttributeNone
  },
  
  
  {
    "getIsElementContentWhitespace", _wrap_DOMText_getIsElementContentWhitespace, kJSPropertyAttributeNone
  },
  
  
  {
    "getWholeText", _wrap_DOMText_getWholeText, kJSPropertyAttributeNone
  },
  
  
  {
    "replaceWholeText", _wrap_DOMText_replaceWholeText, kJSPropertyAttributeNone
  },
  
  
  {
    "isIgnorableWhitespace", _wrap_DOMText_isIgnorableWhitespace, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMText(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMText can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_DOMCDATASection_classDefinition;

static JSClassDefinition _exports_DOMCDATASection_objectDefinition;

static JSClassRef _exports_DOMCDATASection_classRef;


static void _wrap_delete_DOMCDATASection(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMCDATASection * arg1 = (XERCES_CPP_NAMESPACE::DOMCDATASection *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSStaticValue _exports_DOMCDATASection_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMCDATASection_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMCDATASection_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMCDATASection_functions[] = {
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMCDATASection(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMCDATASection can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_DOMNodeList_classDefinition;

static JSClassDefinition _exports_DOMNodeList_objectDefinition;

static JSClassRef _exports_DOMNodeList_classRef;


static void _wrap_delete_DOMNodeList(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMNodeList * arg1 = (XERCES_CPP_NAMESPACE::DOMNodeList *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSValueRef _wrap_DOMNodeList_item(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNodeList *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeList *) 0 ;
  XMLSize_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNodeList_item.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNodeList_item" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNodeList const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNodeList *)(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_JSC_AS_CALL_ARGS(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOMNodeList_item" "', argument " "2"" of type '" "XMLSize_t""'");
  } 
  arg2 = (XMLSize_t)(val2);
  result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNodeList const *)arg1)->item(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNodeList_getLength(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNodeList *arg1 = (XERCES_CPP_NAMESPACE::DOMNodeList *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLSize_t result;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNodeList_getLength.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNodeList_getLength" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNodeList const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNodeList *)(argp1);
  result = ((XERCES_CPP_NAMESPACE::DOMNodeList const *)arg1)->getLength();
  jsresult = SWIG_From_size_t  SWIG_JSC_FROM_CALL_ARGS((size_t)(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSStaticValue _exports_DOMNodeList_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMNodeList_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMNodeList_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMNodeList_functions[] = {
  {
    "item", _wrap_DOMNodeList_item, kJSPropertyAttributeNone
  },
  
  
  {
    "getLength", _wrap_DOMNodeList_getLength, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMNodeList(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMNodeList can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_DOMNamedNodeMap_classDefinition;

static JSClassDefinition _exports_DOMNamedNodeMap_objectDefinition;

static JSClassRef _exports_DOMNamedNodeMap_classRef;


static void _wrap_delete_DOMNamedNodeMap(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMNamedNodeMap * arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSValueRef _wrap_DOMNamedNodeMap_setNamedItem(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNamedNodeMap_setNamedItem.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNamedNodeMap_setNamedItem" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNamedNodeMap *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOMNamedNodeMap_setNamedItem" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg2 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp2);
  result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->setNamedItem(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNamedNodeMap_item(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
  XMLSize_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNamedNodeMap_item.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNamedNodeMap_item" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNamedNodeMap const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)(argp1);
  ecode2 = SWIG_AsVal_size_t SWIG_JSC_AS_CALL_ARGS(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DOMNamedNodeMap_item" "', argument " "2"" of type '" "XMLSize_t""'");
  } 
  arg2 = (XMLSize_t)(val2);
  result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNamedNodeMap const *)arg1)->item(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNamedNodeMap_getNamedItem(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNamedNodeMap_getNamedItem.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNamedNodeMap_getNamedItem" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNamedNodeMap const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNamedNodeMap const *)arg1)->getNamedItem((XMLCh const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNamedNodeMap_getLength(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLSize_t result;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNamedNodeMap_getLength.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNamedNodeMap_getLength" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNamedNodeMap const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)(argp1);
  result = ((XERCES_CPP_NAMESPACE::DOMNamedNodeMap const *)arg1)->getLength();
  jsresult = SWIG_From_size_t  SWIG_JSC_FROM_CALL_ARGS((size_t)(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNamedNodeMap_removeNamedItem(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNamedNodeMap_removeNamedItem.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNamedNodeMap_removeNamedItem" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNamedNodeMap *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->removeNamedItem((XMLCh const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNamedNodeMap_getNamedItemNS(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  XMLCh *arg3 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNamedNodeMap_getNamedItemNS.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNamedNodeMap_getNamedItemNS" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNamedNodeMap const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  
  arg3 = JS2XMLString(argv[1], context);
  
  result = (XERCES_CPP_NAMESPACE::DOMNode *)((XERCES_CPP_NAMESPACE::DOMNamedNodeMap const *)arg1)->getNamedItemNS((XMLCh const *)arg2,(XMLCh const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  delete[] arg2;
  
  
  delete[] arg3;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNamedNodeMap_setNamedItemNS(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *arg2 = (XERCES_CPP_NAMESPACE::DOMNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNamedNodeMap_setNamedItemNS.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNamedNodeMap_setNamedItemNS" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNamedNodeMap *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOMNamedNodeMap_setNamedItemNS" "', argument " "2"" of type '" "XERCES_CPP_NAMESPACE::DOMNode *""'"); 
  }
  arg2 = (XERCES_CPP_NAMESPACE::DOMNode *)(argp2);
  result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->setNamedItemNS(arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNamedNodeMap_removeNamedItemNS(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNamedNodeMap *arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  XMLCh *arg3 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XERCES_CPP_NAMESPACE::DOMNode *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNamedNodeMap_removeNamedItemNS.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNamedNodeMap_removeNamedItemNS" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNamedNodeMap *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNamedNodeMap *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  
  arg3 = JS2XMLString(argv[1], context);
  
  result = (XERCES_CPP_NAMESPACE::DOMNode *)(arg1)->removeNamedItemNS((XMLCh const *)arg2,(XMLCh const *)arg3);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIG_TypeDynamicCast(SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode, SWIG_as_voidptrptr(&result)), 0 |  0 );
  
  
  delete[] arg2;
  
  
  delete[] arg3;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSStaticValue _exports_DOMNamedNodeMap_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMNamedNodeMap_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMNamedNodeMap_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMNamedNodeMap_functions[] = {
  {
    "setNamedItem", _wrap_DOMNamedNodeMap_setNamedItem, kJSPropertyAttributeNone
  },
  
  
  {
    "item", _wrap_DOMNamedNodeMap_item, kJSPropertyAttributeNone
  },
  
  
  {
    "getNamedItem", _wrap_DOMNamedNodeMap_getNamedItem, kJSPropertyAttributeNone
  },
  
  
  {
    "getLength", _wrap_DOMNamedNodeMap_getLength, kJSPropertyAttributeNone
  },
  
  
  {
    "removeNamedItem", _wrap_DOMNamedNodeMap_removeNamedItem, kJSPropertyAttributeNone
  },
  
  
  {
    "getNamedItemNS", _wrap_DOMNamedNodeMap_getNamedItemNS, kJSPropertyAttributeNone
  },
  
  
  {
    "setNamedItemNS", _wrap_DOMNamedNodeMap_setNamedItemNS, kJSPropertyAttributeNone
  },
  
  
  {
    "removeNamedItemNS", _wrap_DOMNamedNodeMap_removeNamedItemNS, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMNamedNodeMap(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMNamedNodeMap can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_DOMDocumentFragment_classDefinition;

static JSClassDefinition _exports_DOMDocumentFragment_objectDefinition;

static JSClassRef _exports_DOMDocumentFragment_classRef;


static void _wrap_delete_DOMDocumentFragment(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMDocumentFragment * arg1 = (XERCES_CPP_NAMESPACE::DOMDocumentFragment *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSStaticValue _exports_DOMDocumentFragment_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMDocumentFragment_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMDocumentFragment_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMDocumentFragment_functions[] = {
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMDocumentFragment(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMDocumentFragment can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_DOMEntityReference_classDefinition;

static JSClassDefinition _exports_DOMEntityReference_objectDefinition;

static JSClassRef _exports_DOMEntityReference_classRef;


static void _wrap_delete_DOMEntityReference(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMEntityReference * arg1 = (XERCES_CPP_NAMESPACE::DOMEntityReference *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSStaticValue _exports_DOMEntityReference_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMEntityReference_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMEntityReference_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMEntityReference_functions[] = {
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMEntityReference(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMEntityReference can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_DOMNotation_classDefinition;

static JSClassDefinition _exports_DOMNotation_objectDefinition;

static JSClassRef _exports_DOMNotation_classRef;


static void _wrap_delete_DOMNotation(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMNotation * arg1 = (XERCES_CPP_NAMESPACE::DOMNotation *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSValueRef _wrap_DOMNotation_getPublicId(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNotation *arg1 = (XERCES_CPP_NAMESPACE::DOMNotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNotation_getPublicId.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNotation_getPublicId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNotation const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNotation *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNotation const *)arg1)->getPublicId();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMNotation_getSystemId(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMNotation *arg1 = (XERCES_CPP_NAMESPACE::DOMNotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMNotation_getSystemId.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMNotation_getSystemId" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMNotation const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMNotation *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMNotation const *)arg1)->getSystemId();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSStaticValue _exports_DOMNotation_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMNotation_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMNotation_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMNotation_functions[] = {
  {
    "getPublicId", _wrap_DOMNotation_getPublicId, kJSPropertyAttributeNone
  },
  
  
  {
    "getSystemId", _wrap_DOMNotation_getSystemId, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMNotation(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMNotation can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_DOMProcessingInstruction_classDefinition;

static JSClassDefinition _exports_DOMProcessingInstruction_objectDefinition;

static JSClassRef _exports_DOMProcessingInstruction_classRef;


static void _wrap_delete_DOMProcessingInstruction(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      XERCES_CPP_NAMESPACE::DOMProcessingInstruction * arg1 = (XERCES_CPP_NAMESPACE::DOMProcessingInstruction *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSValueRef _wrap_DOMProcessingInstruction_getTarget(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMProcessingInstruction *arg1 = (XERCES_CPP_NAMESPACE::DOMProcessingInstruction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMProcessingInstruction_getTarget.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMProcessingInstruction_getTarget" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMProcessingInstruction const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMProcessingInstruction *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMProcessingInstruction const *)arg1)->getTarget();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMProcessingInstruction_getData(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMProcessingInstruction *arg1 = (XERCES_CPP_NAMESPACE::DOMProcessingInstruction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  XMLCh *result = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMProcessingInstruction_getData.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMProcessingInstruction_getData" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMProcessingInstruction const *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMProcessingInstruction *)(argp1);
  result = (XMLCh *)((XERCES_CPP_NAMESPACE::DOMProcessingInstruction const *)arg1)->getData();
  
  jsresult = XMLString2JS(result, context);
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_DOMProcessingInstruction_setData(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  XERCES_CPP_NAMESPACE::DOMProcessingInstruction *arg1 = (XERCES_CPP_NAMESPACE::DOMProcessingInstruction *) 0 ;
  XMLCh *arg2 = (XMLCh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOMProcessingInstruction_setData.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOMProcessingInstruction_setData" "', argument " "1"" of type '" "XERCES_CPP_NAMESPACE::DOMProcessingInstruction *""'"); 
  }
  arg1 = (XERCES_CPP_NAMESPACE::DOMProcessingInstruction *)(argp1);
  
  arg2 = JS2XMLString(argv[0], context);
  
  (arg1)->setData((XMLCh const *)arg2);
  jsresult = JSValueMakeUndefined(context);
  
  
  delete[] arg2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSStaticValue _exports_DOMProcessingInstruction_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMProcessingInstruction_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_DOMProcessingInstruction_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_DOMProcessingInstruction_functions[] = {
  {
    "getTarget", _wrap_DOMProcessingInstruction_getTarget, kJSPropertyAttributeNone
  },
  
  
  {
    "getData", _wrap_DOMProcessingInstruction_getData, kJSPropertyAttributeNone
  },
  
  
  {
    "setData", _wrap_DOMProcessingInstruction_setData, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0 
  }
};


static JSObjectRef _wrap_new_veto_DOMProcessingInstruction(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  SWIG_exception(SWIG_ERROR, "Class DOMProcessingInstruction can not be instantiated");
  return 0;
}


static JSClassDefinition _exports_Event_classDefinition;

static JSClassDefinition _exports_Event_objectDefinition;

static JSClassRef _exports_Event_classRef;


static JSValueRef _wrap_uscxml_Event_INTERNAL(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(uscxml::Event::INTERNAL));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_uscxml_Event_EXTERNAL(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(uscxml::Event::EXTERNAL));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_uscxml_Event_PLATFORM(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  JSValueRef jsresult;
  
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(uscxml::Event::PLATFORM));
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSObjectRef _wrap_new_Event__SWIG_0(JSContextRef context, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  uscxml::Event *result;
  result = (uscxml::Event *)new uscxml::Event();
  
  
  return SWIG_JSC_NewPointerObj(context, result, SWIGTYPE_p_uscxml__Event, SWIG_POINTER_OWN);
  
  goto fail;
fail:
  return NULL;
}


static JSObjectRef _wrap_new_Event__SWIG_1(JSContextRef context, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  std::string *arg1 = 0 ;
  uscxml::Event::Type arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  uscxml::Event *result;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_JSC_AS_CALL_ARGS(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Event" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Event" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int SWIG_JSC_AS_CALL_ARGS(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Event" "', argument " "2"" of type '" "uscxml::Event::Type""'");
  } 
  arg2 = (uscxml::Event::Type)(val2);
  result = (uscxml::Event *)new uscxml::Event((std::string const &)*arg1,arg2);
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  
  return SWIG_JSC_NewPointerObj(context, result, SWIGTYPE_p_uscxml__Event, SWIG_POINTER_OWN);
  
  goto fail;
fail:
  return NULL;
}


static JSObjectRef _wrap_new_Event__SWIG_2(JSContextRef context, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  uscxml::Event *result;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_JSC_AS_CALL_ARGS(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Event" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Event" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (uscxml::Event *)new uscxml::Event((std::string const &)*arg1);
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  return SWIG_JSC_NewPointerObj(context, result, SWIGTYPE_p_uscxml__Event, SWIG_POINTER_OWN);
  
  goto fail;
fail:
  return NULL;
}


static JSObjectRef _wrap_new_Event(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  JSObjectRef thisObject = NULL;
  
  // switch all cases by means of series of if-returns.
  
  if(argc == 0) {
    thisObject = _wrap_new_Event__SWIG_0(context, NULL, argc, argv, exception);
    if(thisObject != NULL) {
      *exception=0; return thisObject; 
    } /* reset exception and return */
  }
  
  if(argc == 2) {
    thisObject = _wrap_new_Event__SWIG_1(context, NULL, argc, argv, exception);
    if(thisObject != NULL) {
      *exception=0; return thisObject; 
    } /* reset exception and return */
  }
  
  if(argc == 1) {
    thisObject = _wrap_new_Event__SWIG_2(context, NULL, argc, argv, exception);
    if(thisObject != NULL) {
      *exception=0; return thisObject; 
    } /* reset exception and return */
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of $jsname");
  
fail:
  return thisObject;
}


static JSValueRef _wrap_Event_operator_equal_to(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  uscxml::Event *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Event_operator_equal_to.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_uscxml__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_operator_equal_to" "', argument " "1"" of type '" "uscxml::Event const *""'"); 
  }
  arg1 = (uscxml::Event *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uscxml__Event,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Event_operator_equal_to" "', argument " "2"" of type '" "uscxml::Event const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_operator_equal_to" "', argument " "2"" of type '" "uscxml::Event const &""'"); 
  }
  arg2 = (uscxml::Event *)(argp2);
  result = (bool)((uscxml::Event const *)arg1)->operator ==((uscxml::Event const &)*arg2);
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static JSValueRef _wrap_Event_operator_not_equal_to(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  uscxml::Event *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Event_operator_not_equal_to.");
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_uscxml__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_operator_not_equal_to" "', argument " "1"" of type '" "uscxml::Event const *""'"); 
  }
  arg1 = (uscxml::Event *)(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_uscxml__Event,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Event_operator_not_equal_to" "', argument " "2"" of type '" "uscxml::Event const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_operator_not_equal_to" "', argument " "2"" of type '" "uscxml::Event const &""'"); 
  }
  arg2 = (uscxml::Event *)(argp2);
  result = (bool)((uscxml::Event const *)arg1)->operator !=((uscxml::Event const &)*arg2);
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static int _wrap_Event_getParam__SWIG_0(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception, JSValueRef* p_result)
{
  uscxml::Event::params_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Data *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Event_getParam__SWIG_0.");
  
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__multimapT_std__string_Data_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_getParam" "', argument " "1"" of type '" "uscxml::Event::params_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_getParam" "', argument " "1"" of type '" "uscxml::Event::params_t const &""'"); 
  }
  arg1 = (uscxml::Event::params_t *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_JSC_AS_CALL_ARGS(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Event_getParam" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_getParam" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Data,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Event_getParam" "', argument " "3"" of type '" "Data &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_getParam" "', argument " "3"" of type '" "Data &""'"); 
  }
  arg3 = (Data *)(argp3);
  result = (bool)uscxml::Event::getParam((std::multimap< std::string,Data > const &)*arg1,(std::string const &)*arg2,*arg3);
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  *p_result = jsresult;
  return SWIG_OK;
  
  goto fail;
fail:
  return SWIG_TypeError;
}


static int _wrap_Event_getParam__SWIG_1(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception, JSValueRef* p_result)
{
  uscxml::Event::params_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::list< Data > *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Event_getParam__SWIG_1.");
  
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__multimapT_std__string_Data_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_getParam" "', argument " "1"" of type '" "uscxml::Event::params_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_getParam" "', argument " "1"" of type '" "uscxml::Event::params_t const &""'"); 
  }
  arg1 = (uscxml::Event::params_t *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_JSC_AS_CALL_ARGS(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Event_getParam" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_getParam" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_std__listT_Data_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Event_getParam" "', argument " "3"" of type '" "std::list< Data > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_getParam" "', argument " "3"" of type '" "std::list< Data > &""'"); 
  }
  arg3 = (std::list< Data > *)(argp3);
  result = (bool)uscxml::Event::getParam((std::multimap< std::string,Data > const &)*arg1,(std::string const &)*arg2,*arg3);
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  *p_result = jsresult;
  return SWIG_OK;
  
  goto fail;
fail:
  return SWIG_TypeError;
}


static int _wrap_Event_getParam__SWIG_3(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception, JSValueRef* p_result)
{
  uscxml::Event::params_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  JSValueRef jsresult;
  
  if(argc != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Event_getParam__SWIG_3.");
  
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__multimapT_std__string_Data_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_getParam" "', argument " "1"" of type '" "uscxml::Event::params_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_getParam" "', argument " "1"" of type '" "uscxml::Event::params_t const &""'"); 
  }
  arg1 = (uscxml::Event::params_t *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_JSC_AS_CALL_ARGS(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Event_getParam" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_getParam" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Event_getParam" "', argument " "3"" of type '" "bool &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_getParam" "', argument " "3"" of type '" "bool &""'"); 
  }
  arg3 = (bool *)(argp3);
  result = (bool)uscxml::Event::getParam((std::multimap< std::string,Data > const &)*arg1,(std::string const &)*arg2,*arg3);
  jsresult = SWIG_From_bool  SWIG_JSC_FROM_CALL_ARGS((bool)(result));
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  *p_result = jsresult;
  return SWIG_OK;
  
  goto fail;
fail:
  return SWIG_TypeError;
}


static JSValueRef _wrap_Event__wrap_Event_getParam(JSContextRef context, JSObjectRef function, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  JSValueRef jsresult;
  int res;
  
  if(argc == 3) {
    res = _wrap_Event_getParam__SWIG_0(context, function, thisObject, argc, argv, exception, &jsresult);
    if(res == SWIG_OK) {
      *exception = 0; return jsresult; 
    }
  }
  
  if(argc == 3) {
    res = _wrap_Event_getParam__SWIG_1(context, function, thisObject, argc, argv, exception, &jsresult);
    if(res == SWIG_OK) {
      *exception = 0; return jsresult; 
    }
  }
  
  if(argc == 3) {
    res = _wrap_Event_getParam__SWIG_3(context, function, thisObject, argc, argv, exception, &jsresult);
    if(res == SWIG_OK) {
      *exception = 0; return jsresult; 
    }
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getParam.");
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static bool _wrap_Event_raw_set(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef value, JSValueRef* exception)
{
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_uscxml__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_raw_set" "', argument " "1"" of type '" "uscxml::Event *""'"); 
  }
  arg1 = (uscxml::Event *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_JSC_AS_CALL_ARGS(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Event_raw_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_raw_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->raw = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  return true;
  
  goto fail;
fail:
  return false;
}


static JSValueRef _wrap_Event_raw_get(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  JSValueRef jsresult;
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_uscxml__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_raw_get" "', argument " "1"" of type '" "uscxml::Event *""'"); 
  }
  arg1 = (uscxml::Event *)(argp1);
  result = (std::string *) & ((arg1)->raw);
  jsresult = SWIG_From_std_string  SWIG_JSC_FROM_CALL_ARGS((std::string)(*result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static bool _wrap_Event_name_set(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef value, JSValueRef* exception)
{
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_uscxml__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_name_set" "', argument " "1"" of type '" "uscxml::Event *""'"); 
  }
  arg1 = (uscxml::Event *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_JSC_AS_CALL_ARGS(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Event_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Event_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->name = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  return true;
  
  goto fail;
fail:
  return false;
}


static JSValueRef _wrap_Event_name_get(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  JSValueRef jsresult;
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_uscxml__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_name_get" "', argument " "1"" of type '" "uscxml::Event *""'"); 
  }
  arg1 = (uscxml::Event *)(argp1);
  result = (std::string *) & ((arg1)->name);
  jsresult = SWIG_From_std_string  SWIG_JSC_FROM_CALL_ARGS((std::string)(*result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static bool _wrap_Event_eventType_set(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef value, JSValueRef* exception)
{
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  uscxml::Event::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_uscxml__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_eventType_set" "', argument " "1"" of type '" "uscxml::Event *""'"); 
  }
  arg1 = (uscxml::Event *)(argp1);
  ecode2 = SWIG_AsVal_int SWIG_JSC_AS_CALL_ARGS(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Event_eventType_set" "', argument " "2"" of type '" "uscxml::Event::Type""'");
  } 
  arg2 = (uscxml::Event::Type)(val2);
  if (arg1) (arg1)->eventType = arg2;
  
  
  
  
  return true;
  
  goto fail;
fail:
  return false;
}


static JSValueRef _wrap_Event_eventType_get(JSContextRef context, JSObjectRef thisObject, JSStringRef propertyName, JSValueRef* exception)
{
  uscxml::Event *arg1 = (uscxml::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uscxml::Event::Type result;
  
  JSValueRef jsresult;
  
  res1 = SWIG_ConvertPtr(thisObject, &argp1,SWIGTYPE_p_uscxml__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_eventType_get" "', argument " "1"" of type '" "uscxml::Event *""'"); 
  }
  arg1 = (uscxml::Event *)(argp1);
  result = (uscxml::Event::Type) ((arg1)->eventType);
  jsresult = SWIG_From_int  SWIG_JSC_FROM_CALL_ARGS((int)(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return JSValueMakeUndefined(context);
}


static void _wrap_delete_Event(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      uscxml::Event * arg1 = (uscxml::Event *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSStaticValue _exports_Event_staticValues[] = {
  {
    "INTERNAL", _wrap_uscxml_Event_INTERNAL, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "EXTERNAL", _wrap_uscxml_Event_EXTERNAL, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "PLATFORM", _wrap_uscxml_Event_PLATFORM, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_Event_staticFunctions[] = {
  {
    "getParam", _wrap_Event__wrap_Event_getParam, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_Event_values[] = {
  {
    "raw", _wrap_Event_raw_get, _wrap_Event_raw_set, kJSPropertyAttributeNone
  },
  
  
  {
    "name", _wrap_Event_name_get, _wrap_Event_name_set, kJSPropertyAttributeNone
  },
  
  
  {
    "eventType", _wrap_Event_eventType_get, _wrap_Event_eventType_set, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_Event_functions[] = {
  {
    "operator_equal_to", _wrap_Event_operator_equal_to, kJSPropertyAttributeNone
  },
  
  
  {
    "operator_not_equal_to", _wrap_Event_operator_not_equal_to, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0 
  }
};


static JSClassDefinition _exports_ErrorEvent_classDefinition;

static JSClassDefinition _exports_ErrorEvent_objectDefinition;

static JSClassRef _exports_ErrorEvent_classRef;


static JSObjectRef _wrap_new_ErrorEvent__SWIG_0(JSContextRef context, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  uscxml::ErrorEvent *result;
  result = (uscxml::ErrorEvent *)new uscxml::ErrorEvent();
  
  
  return SWIG_JSC_NewPointerObj(context, result, SWIGTYPE_p_uscxml__ErrorEvent, SWIG_POINTER_OWN);
  
  goto fail;
fail:
  return NULL;
}


static JSObjectRef _wrap_new_ErrorEvent__SWIG_1(JSContextRef context, JSObjectRef thisObject, size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  uscxml::ErrorEvent *result;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_JSC_AS_CALL_ARGS(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ErrorEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ErrorEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (uscxml::ErrorEvent *)new uscxml::ErrorEvent((std::string const &)*arg1);
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  
  return SWIG_JSC_NewPointerObj(context, result, SWIGTYPE_p_uscxml__ErrorEvent, SWIG_POINTER_OWN);
  
  goto fail;
fail:
  return NULL;
}


static JSObjectRef _wrap_new_ErrorEvent(JSContextRef context, JSObjectRef ctorObject,
  size_t argc, const JSValueRef argv[], JSValueRef* exception)
{
  JSObjectRef thisObject = NULL;
  
  // switch all cases by means of series of if-returns.
  
  if(argc == 0) {
    thisObject = _wrap_new_ErrorEvent__SWIG_0(context, NULL, argc, argv, exception);
    if(thisObject != NULL) {
      *exception=0; return thisObject; 
    } /* reset exception and return */
  }
  
  if(argc == 1) {
    thisObject = _wrap_new_ErrorEvent__SWIG_1(context, NULL, argc, argv, exception);
    if(thisObject != NULL) {
      *exception=0; return thisObject; 
    } /* reset exception and return */
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of $jsname");
  
fail:
  return thisObject;
}


static void _wrap_delete_ErrorEvent(JSObjectRef thisObject)
{
  SwigPrivData* t = (SwigPrivData*) JSObjectGetPrivate(thisObject);
  if(t) {
    if (t->swigCMemOwn) {
      uscxml::ErrorEvent * arg1 = (uscxml::ErrorEvent *)t->swigCObject;
      delete arg1;
    }
    /* remove the private data to make sure that it isn't accessed elsewhere */
    JSObjectSetPrivate(thisObject, NULL);
    free(t);
  }
}


static JSStaticValue _exports_ErrorEvent_staticValues[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_ErrorEvent_staticFunctions[] = {
  {
    0, 0, 0 
  }
};

static JSStaticValue _exports_ErrorEvent_values[] = {
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction _exports_ErrorEvent_functions[] = {
  {
    0, 0, 0 
  }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_XERCES_CPP_NAMESPACE__DOMCDATASectionTo_p_XERCES_CPP_NAMESPACE__DOMText(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMText *)  ((XERCES_CPP_NAMESPACE::DOMCDATASection *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMTextTo_p_XERCES_CPP_NAMESPACE__DOMCharacterData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMCharacterData *)  ((XERCES_CPP_NAMESPACE::DOMText *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMCommentTo_p_XERCES_CPP_NAMESPACE__DOMCharacterData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMCharacterData *)  ((XERCES_CPP_NAMESPACE::DOMComment *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMCDATASectionTo_p_XERCES_CPP_NAMESPACE__DOMCharacterData(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMCharacterData *) (XERCES_CPP_NAMESPACE::DOMText *) ((XERCES_CPP_NAMESPACE::DOMCDATASection *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMElementTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMElement *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMDocumentFragmentTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMDocumentFragment *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMAttrTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMAttr *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMDocumentTypeTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMDocumentType *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMCharacterDataTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMCharacterData *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMTextTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *) (XERCES_CPP_NAMESPACE::DOMCharacterData *) ((XERCES_CPP_NAMESPACE::DOMText *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMCommentTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *) (XERCES_CPP_NAMESPACE::DOMCharacterData *) ((XERCES_CPP_NAMESPACE::DOMComment *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMProcessingInstructionTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMProcessingInstruction *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMEntityTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMEntity *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMEntityReferenceTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMEntityReference *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMCDATASectionTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *) (XERCES_CPP_NAMESPACE::DOMCharacterData *)(XERCES_CPP_NAMESPACE::DOMText *) ((XERCES_CPP_NAMESPACE::DOMCDATASection *) x));
}
static void *_p_XERCES_CPP_NAMESPACE__DOMNotationTo_p_XERCES_CPP_NAMESPACE__DOMNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((XERCES_CPP_NAMESPACE::DOMNode *)  ((XERCES_CPP_NAMESPACE::DOMNotation *) x));
}
static void *_p_uscxml__ErrorEventTo_p_uscxml__Event(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((uscxml::Event *)  ((uscxml::ErrorEvent *) x));
}
static swig_type_info _swigt__p_Data = {"_p_Data", "Data *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMAttr = {"_p_XERCES_CPP_NAMESPACE__DOMAttr", "XERCES_CPP_NAMESPACE::DOMAttr *|p_XERCES_CPP_NAMESPACE__DOMAttr", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMCDATASection = {"_p_XERCES_CPP_NAMESPACE__DOMCDATASection", "p_XERCES_CPP_NAMESPACE__DOMCDATASection", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMCharacterData = {"_p_XERCES_CPP_NAMESPACE__DOMCharacterData", "XERCES_CPP_NAMESPACE::DOMCharacterData *|p_XERCES_CPP_NAMESPACE__DOMCharacterData", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMComment = {"_p_XERCES_CPP_NAMESPACE__DOMComment", "p_XERCES_CPP_NAMESPACE__DOMComment", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMDocument = {"_p_XERCES_CPP_NAMESPACE__DOMDocument", "XERCES_CPP_NAMESPACE::DOMDocument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentFragment = {"_p_XERCES_CPP_NAMESPACE__DOMDocumentFragment", "p_XERCES_CPP_NAMESPACE__DOMDocumentFragment", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentType = {"_p_XERCES_CPP_NAMESPACE__DOMDocumentType", "XERCES_CPP_NAMESPACE::DOMDocumentType *|p_XERCES_CPP_NAMESPACE__DOMDocumentType", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMElement = {"_p_XERCES_CPP_NAMESPACE__DOMElement", "p_XERCES_CPP_NAMESPACE__DOMElement|XERCES_CPP_NAMESPACE::DOMElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMEntity = {"_p_XERCES_CPP_NAMESPACE__DOMEntity", "XERCES_CPP_NAMESPACE::DOMEntity *|p_XERCES_CPP_NAMESPACE__DOMEntity", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMEntityReference = {"_p_XERCES_CPP_NAMESPACE__DOMEntityReference", "p_XERCES_CPP_NAMESPACE__DOMEntityReference", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMException = {"_p_XERCES_CPP_NAMESPACE__DOMException", "p_XERCES_CPP_NAMESPACE__DOMException|XERCES_CPP_NAMESPACE::DOMException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap = {"_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap", "p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap|XERCES_CPP_NAMESPACE::DOMNamedNodeMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMNode = {"_p_XERCES_CPP_NAMESPACE__DOMNode", "XERCES_CPP_NAMESPACE::DOMNode *|p_XERCES_CPP_NAMESPACE__DOMNode", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMNodeList = {"_p_XERCES_CPP_NAMESPACE__DOMNodeList", "p_XERCES_CPP_NAMESPACE__DOMNodeList|XERCES_CPP_NAMESPACE::DOMNodeList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMNotation = {"_p_XERCES_CPP_NAMESPACE__DOMNotation", "XERCES_CPP_NAMESPACE::DOMNotation *|p_XERCES_CPP_NAMESPACE__DOMNotation", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction = {"_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction", "XERCES_CPP_NAMESPACE::DOMProcessingInstruction *|p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMText = {"_p_XERCES_CPP_NAMESPACE__DOMText", "XERCES_CPP_NAMESPACE::DOMText *|p_XERCES_CPP_NAMESPACE__DOMText", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMTypeInfo = {"_p_XERCES_CPP_NAMESPACE__DOMTypeInfo", "XERCES_CPP_NAMESPACE::DOMTypeInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__DOMUserDataHandler = {"_p_XERCES_CPP_NAMESPACE__DOMUserDataHandler", "XERCES_CPP_NAMESPACE::DOMUserDataHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XERCES_CPP_NAMESPACE__MemoryManager = {"_p_XERCES_CPP_NAMESPACE__MemoryManager", "XERCES_CPP_NAMESPACE::MemoryManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int16_t = {"_p_int16_t", "XMLInt16 *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *|XMLInt32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *|XMLInt64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_namelist_t = {"_p_namelist_t", "namelist_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_params_t = {"_p_params_t", "params_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *|XMLSize_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ssize_t = {"_p_ssize_t", "ssize_t *|XMLSSize_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_Data_t = {"_p_std__listT_Data_t", "std::list< Data > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__multimapT_std__string_Data_t = {"_p_std__multimapT_std__string_Data_t", "uscxml::Event::params_t *|std::multimap< std::string,Data > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16_t = {"_p_uint16_t", "XMLUInt16 *|UTF16Ch *|XMLCh *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *|XMLUInt32 *|UCS4Ch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *|XMLUInt64 *|XMLFilePos *|XMLFileLoc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|XMLByte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uscxml__ErrorEvent = {"_p_uscxml__ErrorEvent", "p_uscxml__ErrorEvent", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uscxml__Event = {"_p_uscxml__Event", "uscxml::Event *|p_uscxml__Event", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Data,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMAttr,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMCDATASection,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMCharacterData,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMComment,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMDocument,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentFragment,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentType,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMElement,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMEntity,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMEntityReference,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMException,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMNode,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMNodeList,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMNotation,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMText,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMTypeInfo,
  &_swigt__p_XERCES_CPP_NAMESPACE__DOMUserDataHandler,
  &_swigt__p_XERCES_CPP_NAMESPACE__MemoryManager,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_int16_t,
  &_swigt__p_int32_t,
  &_swigt__p_int64_t,
  &_swigt__p_namelist_t,
  &_swigt__p_params_t,
  &_swigt__p_size_t,
  &_swigt__p_ssize_t,
  &_swigt__p_std__listT_Data_t,
  &_swigt__p_std__multimapT_std__string_Data_t,
  &_swigt__p_uint16_t,
  &_swigt__p_uint32_t,
  &_swigt__p_uint64_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_uscxml__ErrorEvent,
  &_swigt__p_uscxml__Event,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_Data[] = {  {&_swigt__p_Data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMAttr[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMAttr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMCDATASection[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMCDATASection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMCharacterData[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMText, _p_XERCES_CPP_NAMESPACE__DOMTextTo_p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMComment, _p_XERCES_CPP_NAMESPACE__DOMCommentTo_p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMCDATASection, _p_XERCES_CPP_NAMESPACE__DOMCDATASectionTo_p_XERCES_CPP_NAMESPACE__DOMCharacterData, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMComment[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMComment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMDocument[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMDocument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMDocumentFragment[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentFragment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMDocumentType[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMElement[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMEntity[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMEntity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMEntityReference[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMEntityReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMException[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMNode[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMElement, _p_XERCES_CPP_NAMESPACE__DOMElementTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentFragment, _p_XERCES_CPP_NAMESPACE__DOMDocumentFragmentTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMAttr, _p_XERCES_CPP_NAMESPACE__DOMAttrTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMDocumentType, _p_XERCES_CPP_NAMESPACE__DOMDocumentTypeTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMCharacterData, _p_XERCES_CPP_NAMESPACE__DOMCharacterDataTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMText, _p_XERCES_CPP_NAMESPACE__DOMTextTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMComment, _p_XERCES_CPP_NAMESPACE__DOMCommentTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction, _p_XERCES_CPP_NAMESPACE__DOMProcessingInstructionTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMEntity, _p_XERCES_CPP_NAMESPACE__DOMEntityTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMEntityReference, _p_XERCES_CPP_NAMESPACE__DOMEntityReferenceTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMCDATASection, _p_XERCES_CPP_NAMESPACE__DOMCDATASectionTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMNotation, _p_XERCES_CPP_NAMESPACE__DOMNotationTo_p_XERCES_CPP_NAMESPACE__DOMNode, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMNodeList[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMNodeList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMNotation[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMNotation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMText[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMText, 0, 0, 0},  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMCDATASection, _p_XERCES_CPP_NAMESPACE__DOMCDATASectionTo_p_XERCES_CPP_NAMESPACE__DOMText, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMTypeInfo[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMTypeInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__DOMUserDataHandler[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__DOMUserDataHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XERCES_CPP_NAMESPACE__MemoryManager[] = {  {&_swigt__p_XERCES_CPP_NAMESPACE__MemoryManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int16_t[] = {  {&_swigt__p_int16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_namelist_t[] = {  {&_swigt__p_namelist_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_params_t[] = {  {&_swigt__p_params_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ssize_t[] = {  {&_swigt__p_ssize_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_Data_t[] = {  {&_swigt__p_std__listT_Data_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__multimapT_std__string_Data_t[] = {  {&_swigt__p_std__multimapT_std__string_Data_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16_t[] = {  {&_swigt__p_uint16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uscxml__ErrorEvent[] = {  {&_swigt__p_uscxml__ErrorEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uscxml__Event[] = {  {&_swigt__p_uscxml__Event, 0, 0, 0},  {&_swigt__p_uscxml__ErrorEvent, _p_uscxml__ErrorEventTo_p_uscxml__Event, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Data,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMAttr,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMCDATASection,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMCharacterData,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMComment,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMDocument,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMDocumentFragment,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMDocumentType,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMElement,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMEntity,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMEntityReference,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMException,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMNode,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMNodeList,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMNotation,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMText,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMTypeInfo,
  _swigc__p_XERCES_CPP_NAMESPACE__DOMUserDataHandler,
  _swigc__p_XERCES_CPP_NAMESPACE__MemoryManager,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_int16_t,
  _swigc__p_int32_t,
  _swigc__p_int64_t,
  _swigc__p_namelist_t,
  _swigc__p_params_t,
  _swigc__p_size_t,
  _swigc__p_ssize_t,
  _swigc__p_std__listT_Data_t,
  _swigc__p_std__multimapT_std__string_Data_t,
  _swigc__p_uint16_t,
  _swigc__p_uint32_t,
  _swigc__p_uint64_t,
  _swigc__p_unsigned_char,
  _swigc__p_uscxml__ErrorEvent,
  _swigc__p_uscxml__Event,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */



static JSStaticValue exports_values[] = {
  {
    "XERCES_HAS_CPP_NAMESPACE", _wrap_XERCES_HAS_CPP_NAMESPACE, JS_veto_set_variable, kJSPropertyAttributeNone
  },
  
  
  {
    "DEBUG_UTF8_OUT", _wrap_DEBUG_UTF8_OUT_get, _wrap_DEBUG_UTF8_OUT_set, kJSPropertyAttributeNone
  },
  
  
  {
    "DEBUG_UTF8_IN", _wrap_DEBUG_UTF8_IN_get, _wrap_DEBUG_UTF8_IN_set, kJSPropertyAttributeNone
  },
  
  
  {
    0, 0, 0, 0 
  }
};

static JSStaticFunction exports_functions[] = {
  {
    0, 0, 0 
  }
};

static JSClassDefinition exports_classDefinition;
static JSObjectRef exports_object;


SWIGRUNTIME void
SWIG_JSC_SetModule(swig_module_info *swig_module) {}

SWIGRUNTIME swig_module_info *
SWIG_JSC_GetModule(void) {
  return 0;
}

#define SWIG_GetModule(clientdata)                SWIG_JSC_GetModule()
#define SWIG_SetModule(clientdata, pointer)       SWIG_JSC_SetModule(pointer)

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif

bool SWIGJSC_INIT (JSGlobalContextRef context, JSObjectRef *exports) {
    SWIG_InitializeModule(0);


   SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode->dcast = (swig_dycast_func) DOMNode_dynamic_cast;


/* Initialize the base swig type object */
_SwigObject_objectDefinition.staticFunctions = _SwigObject_functions;
_SwigObject_objectDefinition.staticValues = _SwigObject_values;
_SwigObject_classRef = JSClassCreate(&_SwigObject_objectDefinition);

/* Initialize the PackedData class */
_SwigPackedData_objectDefinition.staticFunctions = _SwigPackedData_functions;
_SwigPackedData_objectDefinition.staticValues = _SwigPackedData_values;
_SwigPackedData_objectDefinition.finalize = _wrap_SwigPackedData_delete;
_SwigPackedData_classRef = JSClassCreate(&_SwigPackedData_objectDefinition);

/* Create objects for namespaces */

exports_classDefinition.staticFunctions = exports_functions;
exports_classDefinition.staticValues = exports_values;
exports_object = JSObjectMake(context, JSClassCreate(&exports_classDefinition), NULL);


/* Register classes */

_exports_DOMException_classDefinition.staticFunctions = _exports_DOMException_staticFunctions;
_exports_DOMException_classDefinition.staticValues = _exports_DOMException_staticValues;
_exports_DOMException_classDefinition.callAsConstructor = _wrap_new_DOMException;
_exports_DOMException_objectDefinition.finalize = _wrap_delete_DOMException;
_exports_DOMException_objectDefinition.staticValues = _exports_DOMException_values;
_exports_DOMException_objectDefinition.staticFunctions = _exports_DOMException_functions;

_exports_DOMException_objectDefinition.parentClass = _SwigObject_classRef;


_exports_DOMException_classRef = JSClassCreate(&_exports_DOMException_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMException->clientdata = _exports_DOMException_classRef;


JS_registerClass(context, exports_object, "DOMException", &_exports_DOMException_classDefinition);


_exports_DOMNode_classDefinition.staticFunctions = _exports_DOMNode_staticFunctions;
_exports_DOMNode_classDefinition.staticValues = _exports_DOMNode_staticValues;
_exports_DOMNode_classDefinition.callAsConstructor = _wrap_new_veto_DOMNode;
_exports_DOMNode_objectDefinition.finalize = _wrap_delete_DOMNode;
_exports_DOMNode_objectDefinition.staticValues = _exports_DOMNode_values;
_exports_DOMNode_objectDefinition.staticFunctions = _exports_DOMNode_functions;

_exports_DOMNode_objectDefinition.parentClass = _SwigObject_classRef;


_exports_DOMNode_classRef = JSClassCreate(&_exports_DOMNode_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode->clientdata = _exports_DOMNode_classRef;


JS_registerClass(context, exports_object, "DOMNode", &_exports_DOMNode_classDefinition);


_exports_DOMAttr_classDefinition.staticFunctions = _exports_DOMAttr_staticFunctions;
_exports_DOMAttr_classDefinition.staticValues = _exports_DOMAttr_staticValues;
_exports_DOMAttr_classDefinition.callAsConstructor = _wrap_new_veto_DOMAttr;
_exports_DOMAttr_objectDefinition.finalize = _wrap_delete_DOMAttr;
_exports_DOMAttr_objectDefinition.staticValues = _exports_DOMAttr_values;
_exports_DOMAttr_objectDefinition.staticFunctions = _exports_DOMAttr_functions;

if (SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode != NULL) {
  _exports_DOMAttr_objectDefinition.parentClass = (JSClassRef) SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode->clientdata;
}


_exports_DOMAttr_classRef = JSClassCreate(&_exports_DOMAttr_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMAttr->clientdata = _exports_DOMAttr_classRef;


JS_registerClass(context, exports_object, "DOMAttr", &_exports_DOMAttr_classDefinition);


_exports_DOMElement_classDefinition.staticFunctions = _exports_DOMElement_staticFunctions;
_exports_DOMElement_classDefinition.staticValues = _exports_DOMElement_staticValues;
_exports_DOMElement_classDefinition.callAsConstructor = _wrap_new_veto_DOMElement;
_exports_DOMElement_objectDefinition.finalize = _wrap_delete_DOMElement;
_exports_DOMElement_objectDefinition.staticValues = _exports_DOMElement_values;
_exports_DOMElement_objectDefinition.staticFunctions = _exports_DOMElement_functions;

if (SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode != NULL) {
  _exports_DOMElement_objectDefinition.parentClass = (JSClassRef) SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode->clientdata;
}


_exports_DOMElement_classRef = JSClassCreate(&_exports_DOMElement_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMElement->clientdata = _exports_DOMElement_classRef;


JS_registerClass(context, exports_object, "DOMElement", &_exports_DOMElement_classDefinition);


_exports_DOMEntity_classDefinition.staticFunctions = _exports_DOMEntity_staticFunctions;
_exports_DOMEntity_classDefinition.staticValues = _exports_DOMEntity_staticValues;
_exports_DOMEntity_classDefinition.callAsConstructor = _wrap_new_veto_DOMEntity;
_exports_DOMEntity_objectDefinition.finalize = _wrap_delete_DOMEntity;
_exports_DOMEntity_objectDefinition.staticValues = _exports_DOMEntity_values;
_exports_DOMEntity_objectDefinition.staticFunctions = _exports_DOMEntity_functions;

if (SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode != NULL) {
  _exports_DOMEntity_objectDefinition.parentClass = (JSClassRef) SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode->clientdata;
}


_exports_DOMEntity_classRef = JSClassCreate(&_exports_DOMEntity_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntity->clientdata = _exports_DOMEntity_classRef;


JS_registerClass(context, exports_object, "DOMEntity", &_exports_DOMEntity_classDefinition);


_exports_DOMDocumentType_classDefinition.staticFunctions = _exports_DOMDocumentType_staticFunctions;
_exports_DOMDocumentType_classDefinition.staticValues = _exports_DOMDocumentType_staticValues;
_exports_DOMDocumentType_classDefinition.callAsConstructor = _wrap_new_veto_DOMDocumentType;
_exports_DOMDocumentType_objectDefinition.finalize = _wrap_delete_DOMDocumentType;
_exports_DOMDocumentType_objectDefinition.staticValues = _exports_DOMDocumentType_values;
_exports_DOMDocumentType_objectDefinition.staticFunctions = _exports_DOMDocumentType_functions;

if (SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode != NULL) {
  _exports_DOMDocumentType_objectDefinition.parentClass = (JSClassRef) SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode->clientdata;
}


_exports_DOMDocumentType_classRef = JSClassCreate(&_exports_DOMDocumentType_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentType->clientdata = _exports_DOMDocumentType_classRef;


JS_registerClass(context, exports_object, "DOMDocumentType", &_exports_DOMDocumentType_classDefinition);


_exports_DOMCharacterData_classDefinition.staticFunctions = _exports_DOMCharacterData_staticFunctions;
_exports_DOMCharacterData_classDefinition.staticValues = _exports_DOMCharacterData_staticValues;
_exports_DOMCharacterData_classDefinition.callAsConstructor = _wrap_new_veto_DOMCharacterData;
_exports_DOMCharacterData_objectDefinition.finalize = _wrap_delete_DOMCharacterData;
_exports_DOMCharacterData_objectDefinition.staticValues = _exports_DOMCharacterData_values;
_exports_DOMCharacterData_objectDefinition.staticFunctions = _exports_DOMCharacterData_functions;

if (SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode != NULL) {
  _exports_DOMCharacterData_objectDefinition.parentClass = (JSClassRef) SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode->clientdata;
}


_exports_DOMCharacterData_classRef = JSClassCreate(&_exports_DOMCharacterData_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData->clientdata = _exports_DOMCharacterData_classRef;


JS_registerClass(context, exports_object, "DOMCharacterData", &_exports_DOMCharacterData_classDefinition);


_exports_DOMComment_classDefinition.staticFunctions = _exports_DOMComment_staticFunctions;
_exports_DOMComment_classDefinition.staticValues = _exports_DOMComment_staticValues;
_exports_DOMComment_classDefinition.callAsConstructor = _wrap_new_veto_DOMComment;
_exports_DOMComment_objectDefinition.finalize = _wrap_delete_DOMComment;
_exports_DOMComment_objectDefinition.staticValues = _exports_DOMComment_values;
_exports_DOMComment_objectDefinition.staticFunctions = _exports_DOMComment_functions;

if (SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData != NULL) {
  _exports_DOMComment_objectDefinition.parentClass = (JSClassRef) SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData->clientdata;
}


_exports_DOMComment_classRef = JSClassCreate(&_exports_DOMComment_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMComment->clientdata = _exports_DOMComment_classRef;


JS_registerClass(context, exports_object, "DOMComment", &_exports_DOMComment_classDefinition);


_exports_DOMText_classDefinition.staticFunctions = _exports_DOMText_staticFunctions;
_exports_DOMText_classDefinition.staticValues = _exports_DOMText_staticValues;
_exports_DOMText_classDefinition.callAsConstructor = _wrap_new_veto_DOMText;
_exports_DOMText_objectDefinition.finalize = _wrap_delete_DOMText;
_exports_DOMText_objectDefinition.staticValues = _exports_DOMText_values;
_exports_DOMText_objectDefinition.staticFunctions = _exports_DOMText_functions;

if (SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData != NULL) {
  _exports_DOMText_objectDefinition.parentClass = (JSClassRef) SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCharacterData->clientdata;
}


_exports_DOMText_classRef = JSClassCreate(&_exports_DOMText_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText->clientdata = _exports_DOMText_classRef;


JS_registerClass(context, exports_object, "DOMText", &_exports_DOMText_classDefinition);


_exports_DOMCDATASection_classDefinition.staticFunctions = _exports_DOMCDATASection_staticFunctions;
_exports_DOMCDATASection_classDefinition.staticValues = _exports_DOMCDATASection_staticValues;
_exports_DOMCDATASection_classDefinition.callAsConstructor = _wrap_new_veto_DOMCDATASection;
_exports_DOMCDATASection_objectDefinition.finalize = _wrap_delete_DOMCDATASection;
_exports_DOMCDATASection_objectDefinition.staticValues = _exports_DOMCDATASection_values;
_exports_DOMCDATASection_objectDefinition.staticFunctions = _exports_DOMCDATASection_functions;

if (SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText != NULL) {
  _exports_DOMCDATASection_objectDefinition.parentClass = (JSClassRef) SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMText->clientdata;
}


_exports_DOMCDATASection_classRef = JSClassCreate(&_exports_DOMCDATASection_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMCDATASection->clientdata = _exports_DOMCDATASection_classRef;


JS_registerClass(context, exports_object, "DOMCDATASection", &_exports_DOMCDATASection_classDefinition);


_exports_DOMNodeList_classDefinition.staticFunctions = _exports_DOMNodeList_staticFunctions;
_exports_DOMNodeList_classDefinition.staticValues = _exports_DOMNodeList_staticValues;
_exports_DOMNodeList_classDefinition.callAsConstructor = _wrap_new_veto_DOMNodeList;
_exports_DOMNodeList_objectDefinition.finalize = _wrap_delete_DOMNodeList;
_exports_DOMNodeList_objectDefinition.staticValues = _exports_DOMNodeList_values;
_exports_DOMNodeList_objectDefinition.staticFunctions = _exports_DOMNodeList_functions;

_exports_DOMNodeList_objectDefinition.parentClass = _SwigObject_classRef;


_exports_DOMNodeList_classRef = JSClassCreate(&_exports_DOMNodeList_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNodeList->clientdata = _exports_DOMNodeList_classRef;


JS_registerClass(context, exports_object, "DOMNodeList", &_exports_DOMNodeList_classDefinition);


_exports_DOMNamedNodeMap_classDefinition.staticFunctions = _exports_DOMNamedNodeMap_staticFunctions;
_exports_DOMNamedNodeMap_classDefinition.staticValues = _exports_DOMNamedNodeMap_staticValues;
_exports_DOMNamedNodeMap_classDefinition.callAsConstructor = _wrap_new_veto_DOMNamedNodeMap;
_exports_DOMNamedNodeMap_objectDefinition.finalize = _wrap_delete_DOMNamedNodeMap;
_exports_DOMNamedNodeMap_objectDefinition.staticValues = _exports_DOMNamedNodeMap_values;
_exports_DOMNamedNodeMap_objectDefinition.staticFunctions = _exports_DOMNamedNodeMap_functions;

_exports_DOMNamedNodeMap_objectDefinition.parentClass = _SwigObject_classRef;


_exports_DOMNamedNodeMap_classRef = JSClassCreate(&_exports_DOMNamedNodeMap_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNamedNodeMap->clientdata = _exports_DOMNamedNodeMap_classRef;


JS_registerClass(context, exports_object, "DOMNamedNodeMap", &_exports_DOMNamedNodeMap_classDefinition);


_exports_DOMDocumentFragment_classDefinition.staticFunctions = _exports_DOMDocumentFragment_staticFunctions;
_exports_DOMDocumentFragment_classDefinition.staticValues = _exports_DOMDocumentFragment_staticValues;
_exports_DOMDocumentFragment_classDefinition.callAsConstructor = _wrap_new_veto_DOMDocumentFragment;
_exports_DOMDocumentFragment_objectDefinition.finalize = _wrap_delete_DOMDocumentFragment;
_exports_DOMDocumentFragment_objectDefinition.staticValues = _exports_DOMDocumentFragment_values;
_exports_DOMDocumentFragment_objectDefinition.staticFunctions = _exports_DOMDocumentFragment_functions;

if (SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode != NULL) {
  _exports_DOMDocumentFragment_objectDefinition.parentClass = (JSClassRef) SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode->clientdata;
}


_exports_DOMDocumentFragment_classRef = JSClassCreate(&_exports_DOMDocumentFragment_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMDocumentFragment->clientdata = _exports_DOMDocumentFragment_classRef;


JS_registerClass(context, exports_object, "DOMDocumentFragment", &_exports_DOMDocumentFragment_classDefinition);


_exports_DOMEntityReference_classDefinition.staticFunctions = _exports_DOMEntityReference_staticFunctions;
_exports_DOMEntityReference_classDefinition.staticValues = _exports_DOMEntityReference_staticValues;
_exports_DOMEntityReference_classDefinition.callAsConstructor = _wrap_new_veto_DOMEntityReference;
_exports_DOMEntityReference_objectDefinition.finalize = _wrap_delete_DOMEntityReference;
_exports_DOMEntityReference_objectDefinition.staticValues = _exports_DOMEntityReference_values;
_exports_DOMEntityReference_objectDefinition.staticFunctions = _exports_DOMEntityReference_functions;

if (SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode != NULL) {
  _exports_DOMEntityReference_objectDefinition.parentClass = (JSClassRef) SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode->clientdata;
}


_exports_DOMEntityReference_classRef = JSClassCreate(&_exports_DOMEntityReference_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMEntityReference->clientdata = _exports_DOMEntityReference_classRef;


JS_registerClass(context, exports_object, "DOMEntityReference", &_exports_DOMEntityReference_classDefinition);


_exports_DOMNotation_classDefinition.staticFunctions = _exports_DOMNotation_staticFunctions;
_exports_DOMNotation_classDefinition.staticValues = _exports_DOMNotation_staticValues;
_exports_DOMNotation_classDefinition.callAsConstructor = _wrap_new_veto_DOMNotation;
_exports_DOMNotation_objectDefinition.finalize = _wrap_delete_DOMNotation;
_exports_DOMNotation_objectDefinition.staticValues = _exports_DOMNotation_values;
_exports_DOMNotation_objectDefinition.staticFunctions = _exports_DOMNotation_functions;

if (SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode != NULL) {
  _exports_DOMNotation_objectDefinition.parentClass = (JSClassRef) SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode->clientdata;
}


_exports_DOMNotation_classRef = JSClassCreate(&_exports_DOMNotation_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNotation->clientdata = _exports_DOMNotation_classRef;


JS_registerClass(context, exports_object, "DOMNotation", &_exports_DOMNotation_classDefinition);


_exports_DOMProcessingInstruction_classDefinition.staticFunctions = _exports_DOMProcessingInstruction_staticFunctions;
_exports_DOMProcessingInstruction_classDefinition.staticValues = _exports_DOMProcessingInstruction_staticValues;
_exports_DOMProcessingInstruction_classDefinition.callAsConstructor = _wrap_new_veto_DOMProcessingInstruction;
_exports_DOMProcessingInstruction_objectDefinition.finalize = _wrap_delete_DOMProcessingInstruction;
_exports_DOMProcessingInstruction_objectDefinition.staticValues = _exports_DOMProcessingInstruction_values;
_exports_DOMProcessingInstruction_objectDefinition.staticFunctions = _exports_DOMProcessingInstruction_functions;

if (SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode != NULL) {
  _exports_DOMProcessingInstruction_objectDefinition.parentClass = (JSClassRef) SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMNode->clientdata;
}


_exports_DOMProcessingInstruction_classRef = JSClassCreate(&_exports_DOMProcessingInstruction_objectDefinition);
SWIGTYPE_p_XERCES_CPP_NAMESPACE__DOMProcessingInstruction->clientdata = _exports_DOMProcessingInstruction_classRef;


JS_registerClass(context, exports_object, "DOMProcessingInstruction", &_exports_DOMProcessingInstruction_classDefinition);


_exports_Event_classDefinition.staticFunctions = _exports_Event_staticFunctions;
_exports_Event_classDefinition.staticValues = _exports_Event_staticValues;
_exports_Event_classDefinition.callAsConstructor = _wrap_new_Event;
_exports_Event_objectDefinition.finalize = _wrap_delete_Event;
_exports_Event_objectDefinition.staticValues = _exports_Event_values;
_exports_Event_objectDefinition.staticFunctions = _exports_Event_functions;

_exports_Event_objectDefinition.parentClass = _SwigObject_classRef;


_exports_Event_classRef = JSClassCreate(&_exports_Event_objectDefinition);
SWIGTYPE_p_uscxml__Event->clientdata = _exports_Event_classRef;


JS_registerClass(context, exports_object, "Event", &_exports_Event_classDefinition);


_exports_ErrorEvent_classDefinition.staticFunctions = _exports_ErrorEvent_staticFunctions;
_exports_ErrorEvent_classDefinition.staticValues = _exports_ErrorEvent_staticValues;
_exports_ErrorEvent_classDefinition.callAsConstructor = _wrap_new_ErrorEvent;
_exports_ErrorEvent_objectDefinition.finalize = _wrap_delete_ErrorEvent;
_exports_ErrorEvent_objectDefinition.staticValues = _exports_ErrorEvent_values;
_exports_ErrorEvent_objectDefinition.staticFunctions = _exports_ErrorEvent_functions;

if (SWIGTYPE_p_uscxml__Event != NULL) {
  _exports_ErrorEvent_objectDefinition.parentClass = (JSClassRef) SWIGTYPE_p_uscxml__Event->clientdata;
}


_exports_ErrorEvent_classRef = JSClassCreate(&_exports_ErrorEvent_objectDefinition);
SWIGTYPE_p_uscxml__ErrorEvent->clientdata = _exports_ErrorEvent_classRef;


JS_registerClass(context, exports_object, "ErrorEvent", &_exports_ErrorEvent_classDefinition);



/* Register namespaces */


*exports = exports_object;

return true;
}
#ifdef __cplusplus
}
#endif

